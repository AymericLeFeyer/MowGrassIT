{"ast":null,"code":"var _jsxFileName = \"/home/aymeric/Git/MowGrassIT/src/App.js\";\n// Author : Aymeric LE FEYER\n// Date : 14/05/2020\n// Client: Progress-IT\nimport React from \"react\";\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport { CardMedia, makeStyles, Card, Grid } from \"@material-ui/core\";\nimport grass1 from \"./res/grass1.jpg\";\nimport grass2 from \"./res/grass2.jpg\";\nimport mower from \"./res/mower.png\";\nimport subject from \"./subject.pdf\";\nexport default function App() {\n  // Hooks\n  // Get the size of the grid\n  const [gridSize, setGridSize] = useState([5, 5]); // Get the grid (absolute positions of tiles and know if the tile is mowed)\n\n  const [grid, setGrid] = useState(createGrid(gridSize)); // Position of the current mower\n\n  const [mowerPos] = useState({\n    x: 0,\n    y: 0,\n    visible: false\n  }); // Array of all mowers, with informations\n\n  const [mowers, setMowers] = useState({\n    array: [{\n      startX: 0,\n      startY: 0,\n      startOrientation: \"Nord\",\n      path: []\n    }]\n  }); // Index of the current mower in the final mowing\n\n  const [currentMower, setCurrentMower] = useState(0); // Index of the current mower in the final mowing\n\n  const [currentAction, setCurrentAction] = useState(0); // Know if the mowing is finished or not\n\n  const [finished, setFinished] = useState(false); // Know if the mowing has started or not\n\n  const [started, setStarted] = useState(false); // Update the started hook\n\n  useEffect(() => {\n    setStarted(!(currentAction === 0 && currentMower === 0) || finished);\n  }, [started, currentAction, currentMower, finished]); // Style of the tiles\n\n  const useStyles = makeStyles({\n    cardStyle: {\n      maxWidth: 345,\n      boxShadow: \"1px 1px 2px black\"\n    },\n    cardMedia: {\n      height: 80,\n      width: 80\n    }\n  });\n  const classes = useStyles(); // Force the rendering of components\n\n  const [, updateState] = React.useState();\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n  return (\n    /*#__PURE__*/\n    // Root of the project\n    React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(DisplayTopInfos, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(GetGridSizeArea, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(GetMowers, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(DisplayGrid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(DisplayMower, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }\n    }), finished ? /*#__PURE__*/React.createElement(EndMow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 19\n      }\n    }) : null)\n  ); // Display the title and the subject downloading button\n\n  function DisplayTopInfos() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }\n    }, \"MowGrass-IT\"), /*#__PURE__*/React.createElement(\"a\", {\n      href: subject,\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      class: \"btn btn-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }\n    }, \"R\\xE9cup\\xE9rer le sujet\")));\n  } // Display the grid size form\n\n\n  function GetGridSizeArea() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"textSizeGrid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }, \"Taille de la grille : \"), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"form-group row sizeForm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      for: \"example-number-input\",\n      class: \"col-2 col-form-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }\n    }, \"Hauteur :\"), started ? /*#__PURE__*/React.createElement(\"label\", {\n      class: \"col-form-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    }, gridSize[0]) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      class: \"form-control\",\n      type: \"number\",\n      value: gridSize[0],\n      onChange: e => updateSizeArea([e.target.value, gridSize[1]]),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"form-group row sizeForm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      for: \"example-number-input\",\n      class: \"col-2 col-form-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }\n    }, \"Largeur :\"), started ? /*#__PURE__*/React.createElement(\"label\", {\n      class: \"col-form-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }\n    }, gridSize[1]) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      class: \"form-control\",\n      type: \"number\",\n      value: gridSize[1],\n      onChange: e => updateSizeArea([gridSize[0], e.target.value]),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 15\n      }\n    }))));\n  } // Create the grid thanks to the grid size\n\n\n  function createGrid(size) {\n    let grid = [[]];\n\n    for (let i = 0; i < size[0]; i++) {\n      let row = [];\n\n      for (let j = 0; j < size[1]; j++) {\n        row.push({\n          card: {\n            x: 0,\n            y: 0\n          },\n          mowed: false\n        });\n      }\n\n      grid.push(row);\n    }\n\n    return grid;\n  } // Update the size of the grid, checking if it's possible\n\n\n  function updateSizeArea(size) {\n    if (size[0] > 4 && size[1] > 4) {\n      if (size[0] <= 15 && size[1] <= 15) {\n        setGridSize(size);\n        setGrid(createGrid(size));\n      } else alert(\"La taille doit être inférieure à 16\");\n    } else alert(\"La taille doit être supérieure à 4\");\n  } // Add new mower. It will update the mowers form automatically\n\n\n  function addMower() {\n    mowers.array.push({\n      startX: 0,\n      startY: 0,\n      startOrientation: \"Nord\",\n      path: []\n    });\n    forceUpdate();\n  } // Start the process of mowing. It's a step by step process\n\n\n  function startMow() {\n    // Set the mower visible\n    mowerPos.visible = true; // Get the coords\n\n    let [x, y] = [mowers.array[currentMower].startX, mowers.array[currentMower].startY]; // Convert it to a inversed vertical axis array (following the subject)\n\n    y = gridSize[1] - 1 - y; // Set the tile mowed\n\n    grid[y + 1][x].mowed = true; // Update the position of the mowers's sprite\n\n    setMowerPosition(grid[y + 1][x].card.x, grid[y + 1][x].card.y); // Force components to re-render\n\n    forceUpdate(); // Do actions, if mowing isn't finished\n\n    if (finished === false) {\n      console.log(currentMower, currentAction);\n\n      if (mowers.array.length > currentMower) {\n        if (mowers.array[currentMower].path.length > currentAction) {\n          nextOperation(currentMower, currentAction);\n          setCurrentAction(currentAction + 1);\n        } else {\n          if (mowers.array.length - 1 > currentMower) {\n            setCurrentMower(currentMower + 1);\n            setCurrentAction(0);\n          } else setFinished(true);\n        }\n      }\n    }\n  } // Call the next operation of the current mower, thanks to the current action ID\n\n\n  function nextOperation(mower, id) {\n    const action = mowers.array[mower].path[id];\n    if (action === \"A\") forward(mower);else {\n      pivot(action, mower);\n    }\n  } // Turn the mower, depending on initial orientation\n\n\n  function pivot(direction, mower) {\n    switch (mowers.array[mower].startOrientation) {\n      case \"Nord\":\n        if (direction === \"D\") {\n          mowers.array[mower].startOrientation = \"Est\";\n        }\n\n        if (direction === \"G\") {\n          mowers.array[mower].startOrientation = \"Ouest\";\n        }\n\n        break;\n\n      case \"Sud\":\n        if (direction === \"D\") {\n          mowers.array[mower].startOrientation = \"Ouest\";\n        }\n\n        if (direction === \"G\") {\n          mowers.array[mower].startOrientation = \"Est\";\n        }\n\n        break;\n\n      case \"Est\":\n        if (direction === \"D\") {\n          mowers.array[mower].startOrientation = \"Sud\";\n        }\n\n        if (direction === \"G\") {\n          mowers.array[mower].startOrientation = \"Nord\";\n        }\n\n        break;\n\n      case \"Ouest\":\n        if (direction === \"D\") {\n          mowers.array[mower].startOrientation = \"Nord\";\n        }\n\n        if (direction === \"G\") {\n          mowers.array[mower].startOrientation = \"Sud\";\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  } // Forward the mower, depending on its orientation\n\n\n  function forward(mower) {\n    let orientation = mowers.array[mower].startOrientation;\n\n    if (orientation === \"Nord\") {\n      if (mowers.array[mower].startY < gridSize[1] - 1) {\n        mowers.array[mower].startY += 1;\n      } else console.log(\"Mouvement inutile\");\n    }\n\n    if (orientation === \"Sud\") {\n      if (mowers.array[mower].startY > 0) {\n        mowers.array[mower].startY -= 1;\n      } else console.log(\"Mouvement inutile\");\n    }\n\n    if (orientation === \"Est\") {\n      if (mowers.array[mower].startX < gridSize[0] - 1) {\n        mowers.array[mower].startX += 1;\n      } else console.log(\"Mouvement inutile\");\n    }\n\n    if (orientation === \"Ouest\") {\n      if (mowers.array[mower].startX > 0) {\n        mowers.array[mower].startX -= 1;\n      } else console.log(\"Mouvement inutile\");\n    }\n  } // Check if the position is correct (in mower forms)\n\n\n  function updateStartMowerPosition(pos, ori, key) {\n    let mow = mowers;\n    if (pos[0] >= 0 && pos[0] < gridSize[1]) mow.array[key].startX = parseInt(pos[0]);else alert(\"La tondeuse n'est plus sur la pelouse !\");\n    if (pos[1] >= 0 && pos[1] < gridSize[0]) mow.array[key].startY = parseInt(pos[1]);else alert(\"La tondeuse n'est plus sur la pelouse !\");\n    mow.array[key].startOrientation = ori;\n    setMowers(mow);\n    forceUpdate();\n  } // Handle function of the input path form\n\n\n  function updatePathMower(char, key, mode) {\n    let letter = char.slice(-1);\n    if (letter === \"d\" || letter === \"D\") mowers.array[key].path.push(\"D\");\n    if (letter === \"g\" || letter === \"G\") mowers.array[key].path.push(\"G\");\n    if (letter === \"a\" || letter === \"A\") mowers.array[key].path.push(\"A\");\n    setMowers(mowers);\n    if (mode === 1) forceUpdate();\n  } // Set the position of the mower\n\n\n  function setMowerPosition(x, y) {\n    mowerPos.x = x;\n    mowerPos.y = y;\n  } // Display rows of tiles\n\n\n  function DisplayRow(row, key) {\n    return /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 7\n      }\n    }, row.map((cell, key2) => {\n      return /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        className: classes.cardStyle,\n        ref: el => {\n          if (!el) return; // Update the absolutes coords of the tiles\n\n          grid[key][key2].card.x = el.getBoundingClientRect().x + window.pageXOffset;\n          grid[key][key2].card.y = el.getBoundingClientRect().y + window.pageYOffset;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(CardMedia, {\n        className: classes.cardMedia // Following the state of the mowed, change the skin of the grass\n        ,\n        image: grid[key][key2].mowed ? grass2 : grass1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 17\n        }\n      })));\n    }));\n  } // Display the lawn\n\n\n  function DisplayGrid() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"lawn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 7\n      }\n    }, grid.map((row, key) => {\n      return DisplayRow(row, key);\n    }));\n  } // Convert string orientation to integer degree\n\n\n  function orientationToDegree(ori) {\n    switch (ori) {\n      case \"Nord\":\n        return 0;\n\n      case \"Est\":\n        return 90;\n\n      case \"Sud\":\n        return 180;\n\n      case \"Ouest\":\n        return 270;\n\n      default:\n        return 0;\n    }\n  } // Dispay the mower\n\n\n  function DisplayMower() {\n    const orientation = orientationToDegree(mowers.array[currentMower].startOrientation);\n    console.log(orientation);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: mower,\n      alt: \"mower\",\n      style: {\n        position: \"absolute\",\n        width: 80,\n        height: 80,\n        left: `${mowerPos.x}px`,\n        top: `${mowerPos.y}px`,\n        opacity: mowerPos.visible === true ? 1 : 0,\n        transform: `rotate(${orientation}deg)`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 9\n      }\n    }));\n  } // Render final texts with final positions\n\n\n  function EndMow() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"endMow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 9\n      }\n    }, \"La tonte est termin\\xE9e\"), mowers.array.map((mower, key) => {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 13\n        }\n      }, \"La tondeuse \", key + 1, \" s'est arr\\xEAt\\xE9e en \", mower.startX, \",\", mower.startY, \", orient\\xE9e \", mower.startOrientation);\n    }));\n  }\n}","map":{"version":3,"sources":["/home/aymeric/Git/MowGrassIT/src/App.js"],"names":["React","useState","useEffect","CardMedia","makeStyles","Card","Grid","grass1","grass2","mower","subject","App","gridSize","setGridSize","grid","setGrid","createGrid","mowerPos","x","y","visible","mowers","setMowers","array","startX","startY","startOrientation","path","currentMower","setCurrentMower","currentAction","setCurrentAction","finished","setFinished","started","setStarted","useStyles","cardStyle","maxWidth","boxShadow","cardMedia","height","width","classes","updateState","forceUpdate","useCallback","DisplayTopInfos","GetGridSizeArea","e","updateSizeArea","target","value","size","i","row","j","push","card","mowed","alert","addMower","startMow","setMowerPosition","console","log","length","nextOperation","id","action","forward","pivot","direction","orientation","updateStartMowerPosition","pos","ori","key","mow","parseInt","updatePathMower","char","mode","letter","slice","DisplayRow","map","cell","key2","el","getBoundingClientRect","window","pageXOffset","pageYOffset","DisplayGrid","orientationToDegree","DisplayMower","position","left","top","opacity","transform","EndMow"],"mappings":"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","sourcesContent":["// Author : Aymeric LE FEYER\n// Date : 14/05/2020\n// Client: Progress-IT\n\nimport React from \"react\";\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport { CardMedia, makeStyles, Card, Grid } from \"@material-ui/core\";\n\nimport grass1 from \"./res/grass1.jpg\";\nimport grass2 from \"./res/grass2.jpg\";\nimport mower from \"./res/mower.png\";\nimport subject from \"./subject.pdf\";\n\nexport default function App() {\n  // Hooks\n  // Get the size of the grid\n  const [gridSize, setGridSize] = useState([5, 5]);\n  // Get the grid (absolute positions of tiles and know if the tile is mowed)\n  const [grid, setGrid] = useState(createGrid(gridSize));\n  // Position of the current mower\n  const [mowerPos] = useState({\n    x: 0,\n    y: 0,\n    visible: false,\n  });\n  // Array of all mowers, with informations\n  const [mowers, setMowers] = useState({\n    array: [\n      {\n        startX: 0,\n        startY: 0,\n        startOrientation: \"Nord\",\n        path: [],\n      },\n    ],\n  });\n  // Index of the current mower in the final mowing\n  const [currentMower, setCurrentMower] = useState(0);\n  // Index of the current mower in the final mowing\n  const [currentAction, setCurrentAction] = useState(0);\n  // Know if the mowing is finished or not\n  const [finished, setFinished] = useState(false);\n  // Know if the mowing has started or not\n  const [started, setStarted] = useState(false);\n  // Update the started hook\n  useEffect(() => {\n    setStarted(!(currentAction === 0 && currentMower === 0) || finished);\n  }, [started, currentAction, currentMower, finished]);\n\n  // Style of the tiles\n  const useStyles = makeStyles({\n    cardStyle: {\n      maxWidth: 345,\n\n      boxShadow: \"1px 1px 2px black\",\n    },\n    cardMedia: {\n      height: 80,\n      width: 80,\n    },\n  });\n\n  const classes = useStyles();\n\n  // Force the rendering of components\n  const [, updateState] = React.useState();\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n\n  return (\n    // Root of the project\n    <div className=\"App\">\n      <DisplayTopInfos />\n      <GetGridSizeArea />\n      <GetMowers />\n      <DisplayGrid />\n      <DisplayMower />\n      {finished ? <EndMow /> : null}\n    </div>\n  );\n\n  // Display the title and the subject downloading button\n  function DisplayTopInfos() {\n    return (\n      <div>\n        <h1>MowGrass-IT</h1>\n        <a href={subject} target=\"_blank\" rel=\"noopener noreferrer\">\n          <button type=\"button\" class=\"btn btn-primary\">\n            Récupérer le sujet\n          </button>\n        </a>\n      </div>\n    );\n  }\n\n  // Display the grid size form\n  function GetGridSizeArea() {\n    return (\n      <div>\n        <p className=\"textSizeGrid\">Taille de la grille : </p>\n        <div class=\"form-group row sizeForm\">\n          <label for=\"example-number-input\" class=\"col-2 col-form-label\">\n            Hauteur :\n          </label>\n          {started ? (\n            <label class=\"col-form-label\">{gridSize[0]}</label>\n          ) : (\n            <div>\n              <input\n                class=\"form-control\"\n                type=\"number\"\n                value={gridSize[0]}\n                onChange={(e) => updateSizeArea([e.target.value, gridSize[1]])}\n              />\n            </div>\n          )}\n        </div>\n        <div class=\"form-group row sizeForm\">\n          <label for=\"example-number-input\" class=\"col-2 col-form-label\">\n            Largeur :\n          </label>\n          {started ? (\n            <label class=\"col-form-label\">{gridSize[1]}</label>\n          ) : (\n            <div>\n              <input\n                class=\"form-control\"\n                type=\"number\"\n                value={gridSize[1]}\n                onChange={(e) => updateSizeArea([gridSize[0], e.target.value])}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  // Create the grid thanks to the grid size\n  function createGrid(size) {\n    let grid = [[]];\n    for (let i = 0; i < size[0]; i++) {\n      let row = [];\n      for (let j = 0; j < size[1]; j++) {\n        row.push({\n          card: {\n            x: 0,\n            y: 0,\n          },\n          mowed: false,\n        });\n      }\n      grid.push(row);\n    }\n    return grid;\n  }\n\n  // Update the size of the grid, checking if it's possible\n  function updateSizeArea(size) {\n    if (size[0] > 4 && size[1] > 4) {\n      if (size[0] <= 15 && size[1] <= 15) {\n        setGridSize(size);\n        setGrid(createGrid(size));\n      } else alert(\"La taille doit être inférieure à 16\");\n    } else alert(\"La taille doit être supérieure à 4\");\n  }\n\n  \n\n  // Add new mower. It will update the mowers form automatically\n  function addMower() {\n    mowers.array.push({\n      startX: 0,\n      startY: 0,\n      startOrientation: \"Nord\",\n      path: [],\n    });\n    forceUpdate();\n  }\n\n  // Start the process of mowing. It's a step by step process\n  function startMow() {\n    // Set the mower visible\n    mowerPos.visible = true;\n    // Get the coords\n    let [x, y] = [\n      mowers.array[currentMower].startX,\n      mowers.array[currentMower].startY,\n    ];\n    // Convert it to a inversed vertical axis array (following the subject)\n    y = gridSize[1] - 1 - y;\n    // Set the tile mowed\n    grid[y + 1][x].mowed = true;\n    // Update the position of the mowers's sprite\n    setMowerPosition(grid[y + 1][x].card.x, grid[y + 1][x].card.y);\n    // Force components to re-render\n    forceUpdate();\n\n    // Do actions, if mowing isn't finished\n    if (finished === false) {\n      console.log(currentMower, currentAction);\n      if (mowers.array.length > currentMower) {\n        if (mowers.array[currentMower].path.length > currentAction) {\n          nextOperation(currentMower, currentAction);\n          setCurrentAction(currentAction + 1);\n        } else {\n          if (mowers.array.length - 1 > currentMower) {\n            setCurrentMower(currentMower + 1);\n            setCurrentAction(0);\n          } else setFinished(true);\n        }\n      }\n    }\n  }\n\n  // Call the next operation of the current mower, thanks to the current action ID\n  function nextOperation(mower, id) {\n    const action = mowers.array[mower].path[id];\n    if (action === \"A\") forward(mower);\n    else {\n      pivot(action, mower);\n    }\n  }\n\n  // Turn the mower, depending on initial orientation\n  function pivot(direction, mower) {\n    switch (mowers.array[mower].startOrientation) {\n      case \"Nord\":\n        if (direction === \"D\") {\n          mowers.array[mower].startOrientation = \"Est\";\n        }\n        if (direction === \"G\") {\n          mowers.array[mower].startOrientation = \"Ouest\";\n        }\n        break;\n      case \"Sud\":\n        if (direction === \"D\") {\n          mowers.array[mower].startOrientation = \"Ouest\";\n        }\n        if (direction === \"G\") {\n          mowers.array[mower].startOrientation = \"Est\";\n        }\n        break;\n      case \"Est\":\n        if (direction === \"D\") {\n          mowers.array[mower].startOrientation = \"Sud\";\n        }\n        if (direction === \"G\") {\n          mowers.array[mower].startOrientation = \"Nord\";\n        }\n        break;\n      case \"Ouest\":\n        if (direction === \"D\") {\n          mowers.array[mower].startOrientation = \"Nord\";\n        }\n        if (direction === \"G\") {\n          mowers.array[mower].startOrientation = \"Sud\";\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  // Forward the mower, depending on its orientation\n  function forward(mower) {\n    let orientation = mowers.array[mower].startOrientation;\n    if (orientation === \"Nord\") {\n      if (mowers.array[mower].startY < gridSize[1] - 1) {\n        mowers.array[mower].startY += 1;\n      } else console.log(\"Mouvement inutile\");\n    }\n    if (orientation === \"Sud\") {\n      if (mowers.array[mower].startY > 0) {\n        mowers.array[mower].startY -= 1;\n      } else console.log(\"Mouvement inutile\");\n    }\n    if (orientation === \"Est\") {\n      if (mowers.array[mower].startX < gridSize[0] - 1) {\n        mowers.array[mower].startX += 1;\n      } else console.log(\"Mouvement inutile\");\n    }\n    if (orientation === \"Ouest\") {\n      if (mowers.array[mower].startX > 0) {\n        mowers.array[mower].startX -= 1;\n      } else console.log(\"Mouvement inutile\");\n    }\n  }\n\n  // Check if the position is correct (in mower forms)\n  function updateStartMowerPosition(pos, ori, key) {\n    let mow = mowers;\n    if (pos[0] >= 0 && pos[0] < gridSize[1])\n      mow.array[key].startX = parseInt(pos[0]);\n    else alert(\"La tondeuse n'est plus sur la pelouse !\");\n    if (pos[1] >= 0 && pos[1] < gridSize[0])\n      mow.array[key].startY = parseInt(pos[1]);\n    else alert(\"La tondeuse n'est plus sur la pelouse !\");\n    mow.array[key].startOrientation = ori;\n    setMowers(mow);\n    forceUpdate();\n  }\n\n  // Handle function of the input path form\n  function updatePathMower(char, key, mode) {\n    let letter = char.slice(-1);\n    if (letter === \"d\" || letter === \"D\") mowers.array[key].path.push(\"D\");\n    if (letter === \"g\" || letter === \"G\") mowers.array[key].path.push(\"G\");\n    if (letter === \"a\" || letter === \"A\") mowers.array[key].path.push(\"A\");\n    setMowers(mowers);\n    if (mode === 1) forceUpdate();\n  }\n\n  \n  // Set the position of the mower\n  function setMowerPosition(x, y) {\n    mowerPos.x = x;\n    mowerPos.y = y;\n  }\n\n\n  // Display rows of tiles\n  function DisplayRow(row, key) {\n    return (\n      <Grid container>\n        {row.map((cell, key2) => {\n          return (\n            <Grid item>\n              <Card\n                className={classes.cardStyle}\n                ref={(el) => {\n                  if (!el) return;\n                  // Update the absolutes coords of the tiles\n                  grid[key][key2].card.x =\n                    el.getBoundingClientRect().x + window.pageXOffset;\n                  grid[key][key2].card.y =\n                    el.getBoundingClientRect().y + window.pageYOffset;\n                }}\n              >\n                <CardMedia\n                  className={classes.cardMedia}\n                  // Following the state of the mowed, change the skin of the grass\n                  image={grid[key][key2].mowed ? grass2 : grass1}\n                />\n              </Card>\n            </Grid>\n          );\n        })}\n      </Grid>\n    );\n  }\n\n  // Display the lawn\n  function DisplayGrid() {\n    return (\n      <div className=\"lawn\">\n        {grid.map((row, key) => {\n          return DisplayRow(row, key);\n        })}\n      </div>\n    );\n  }\n\n  // Convert string orientation to integer degree\n  function orientationToDegree(ori) {\n    switch (ori) {\n      case \"Nord\":\n        return 0;\n      case \"Est\":\n        return 90;\n      case \"Sud\":\n        return 180;\n      case \"Ouest\":\n        return 270;\n      default:\n        return 0;\n    }\n  }\n\n  // Dispay the mower\n  function DisplayMower() {\n    const orientation = orientationToDegree(\n      mowers.array[currentMower].startOrientation\n    );\n    console.log(orientation);\n\n    return (\n      <div>\n        <img\n          src={mower}\n          alt=\"mower\"\n          style={{\n            position: \"absolute\",\n            width: 80,\n            height: 80,\n            left: `${mowerPos.x}px`,\n            top: `${mowerPos.y}px`,\n            opacity: mowerPos.visible === true ? 1 : 0,\n            transform: `rotate(${orientation}deg)`,\n          }}\n        />\n      </div>\n    );\n  }\n\n  // Render final texts with final positions\n  function EndMow() {\n    return (\n      <div className=\"endMow\">\n        <p className=\"title\">La tonte est terminée</p>\n        {mowers.array.map((mower, key) => {\n          return (\n            <p>\n              La tondeuse {key + 1} s'est arrêtée en {mower.startX},\n              {mower.startY}, orientée {mower.startOrientation}\n            </p>\n          );\n        })}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}