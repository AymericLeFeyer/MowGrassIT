{"ast":null,"code":"import _slicedToArray from\"/home/aymeric/Git/MowGrassIT/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";// Author : Aymeric LE FEYER\n// Date : 14/05/2020\n// Client: Progress-IT\nimport React from\"react\";import\"./App.css\";import{useState,useEffect}from\"react\";import{CardMedia,makeStyles,Card,Grid}from\"@material-ui/core\";import grass1 from\"./res/grass1.jpg\";import grass2 from\"./res/grass2.jpg\";import mower from\"./res/mower.png\";import subject from\"./subject.pdf\";export default function App(){// Hooks\n// Get the size of the grid\nvar _useState=useState([5,5]),_useState2=_slicedToArray(_useState,2),gridSize=_useState2[0],setGridSize=_useState2[1];// Get the grid (absolute positions of tiles and know if the tile is mowed)\nvar _useState3=useState(createGrid(gridSize)),_useState4=_slicedToArray(_useState3,2),grid=_useState4[0],setGrid=_useState4[1];// Position of the current mower\nvar _useState5=useState({x:0,y:0,visible:false}),_useState6=_slicedToArray(_useState5,1),mowerPos=_useState6[0];// Array of all mowers, with informations\nvar _useState7=useState({array:[{startX:0,startY:0,startOrientation:\"Nord\",path:[]}]}),_useState8=_slicedToArray(_useState7,2),mowers=_useState8[0],setMowers=_useState8[1];// Index of the current mower in the final mowing\nvar _useState9=useState(0),_useState10=_slicedToArray(_useState9,2),currentMower=_useState10[0],setCurrentMower=_useState10[1];// Index of the current mower in the final mowing\nvar _useState11=useState(0),_useState12=_slicedToArray(_useState11,2),currentAction=_useState12[0],setCurrentAction=_useState12[1];// Know if the mowing is finished or not\nvar _useState13=useState(false),_useState14=_slicedToArray(_useState13,2),finished=_useState14[0],setFinished=_useState14[1];// Know if the mowing has started or not\nvar _useState15=useState(false),_useState16=_slicedToArray(_useState15,2),started=_useState16[0],setStarted=_useState16[1];// Update the started hook\nuseEffect(function(){setStarted(!(currentAction===0&&currentMower===0)||finished);},[started,currentAction,currentMower,finished]);// Style of the tiles\nvar useStyles=makeStyles({cardStyle:{maxWidth:345,boxShadow:\"1px 1px 2px black\"},cardMedia:{height:80,width:80}});var classes=useStyles();// Force the rendering of components\nvar _React$useState=React.useState(),_React$useState2=_slicedToArray(_React$useState,2),updateState=_React$useState2[1];var forceUpdate=React.useCallback(function(){return updateState({});},[]);return/*#__PURE__*/ (// Root of the project\nReact.createElement(\"div\",{className:\"App\"},/*#__PURE__*/React.createElement(DisplayTopInfos,null),/*#__PURE__*/React.createElement(GetGridSizeArea,null),/*#__PURE__*/React.createElement(GetMowers,null),/*#__PURE__*/React.createElement(DisplayGrid,null),/*#__PURE__*/React.createElement(DisplayMower,null),finished?/*#__PURE__*/React.createElement(EndMow,null):null));// Display the title and the subject downloading button\nfunction DisplayTopInfos(){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h1\",null,\"MowGrass-IT\"),/*#__PURE__*/React.createElement(\"a\",{href:subject,target:\"_blank\",rel:\"noopener noreferrer\"},/*#__PURE__*/React.createElement(\"button\",{type:\"button\",class:\"btn btn-primary\"},\"R\\xE9cup\\xE9rer le sujet\")));}// Display the grid size form\nfunction GetGridSizeArea(){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"p\",{className:\"textSizeGrid\"},\"Taille de la grille : \"),/*#__PURE__*/React.createElement(\"div\",{class:\"form-group row sizeForm\"},/*#__PURE__*/React.createElement(\"label\",{for:\"example-number-input\",class:\"col-2 col-form-label\"},\"Hauteur :\"),started?/*#__PURE__*/React.createElement(\"label\",{class:\"col-form-label\"},gridSize[0]):/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"input\",{class:\"form-control\",type:\"number\",value:gridSize[0],onChange:function onChange(e){return updateSizeArea([e.target.value,gridSize[1]]);}}))),/*#__PURE__*/React.createElement(\"div\",{class:\"form-group row sizeForm\"},/*#__PURE__*/React.createElement(\"label\",{for:\"example-number-input\",class:\"col-2 col-form-label\"},\"Largeur :\"),started?/*#__PURE__*/React.createElement(\"label\",{class:\"col-form-label\"},gridSize[1]):/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"input\",{class:\"form-control\",type:\"number\",value:gridSize[1],onChange:function onChange(e){return updateSizeArea([gridSize[0],e.target.value]);}}))));}// Create the grid thanks to the grid size\nfunction createGrid(size){var grid=[[]];for(var i=0;i<size[0];i++){var row=[];for(var j=0;j<size[1];j++){row.push({card:{x:0,y:0},mowed:false});}grid.push(row);}return grid;}// Update the size of the grid, checking if it's possible\nfunction updateSizeArea(size){if(size[0]>4&&size[1]>4){if(size[0]<=15&&size[1]<=15){setGridSize(size);setGrid(createGrid(size));}else alert(\"La taille doit être inférieure à 16\");}else alert(\"La taille doit être supérieure à 4\");}// Render the mower forms. If the mowing has started, all inputs fields are been removed\nfunction DisplayMowerForms(){return mowers.array.map(function(mower,key){return/*#__PURE__*/React.createElement(\"div\",{className:\"divMowers\"},/*#__PURE__*/React.createElement(Grid,{container:true},/*#__PURE__*/React.createElement(Grid,{item:true,xs:2},/*#__PURE__*/React.createElement(\"p\",{className:\"numMower\"},\"Tondeuse \",key+1)),/*#__PURE__*/React.createElement(Grid,{item:true,xs:true},/*#__PURE__*/React.createElement(\"div\",{class:\"form-group row sizeForm\"},/*#__PURE__*/React.createElement(\"label\",{for:\"example-number-input\",class:\"col-4 col-form-label\"},\"Position X :\"),started?/*#__PURE__*/React.createElement(\"label\",{class:\"col-4 col-form-label\"},mowers.array[key].startX):/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"input\",{class:\"form-control\",type:\"number\",value:mowers.array[key].startX,onChange:function onChange(e){return updateStartMowerPosition([e.target.value,mowers.array[key].startY],mowers.array[key].startOrientation,key,0);}})))),/*#__PURE__*/React.createElement(Grid,{item:true,xs:true},/*#__PURE__*/React.createElement(\"div\",{class:\"form-group row sizeForm\"},/*#__PURE__*/React.createElement(\"label\",{for:\"example-number-input\",class:\"col-4 col-form-label\"},\"Position Y :\"),started?/*#__PURE__*/React.createElement(\"label\",{class:\"col-4 col-form-label\"},mowers.array[key].startY):/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"input\",{class:\"form-control\",type:\"number\",value:mowers.array[key].startY,onChange:function onChange(e){return updateStartMowerPosition([mowers.array[key].startX,e.target.value],mowers.array[key].startOrientation,key,0);}})))),/*#__PURE__*/React.createElement(Grid,{item:true,xs:true},/*#__PURE__*/React.createElement(\"div\",{class:\"form-group row sizeForm\"},/*#__PURE__*/React.createElement(\"label\",{for:\"example-number-input\",class:\"col-4 col-form-label\"},\"Orientation :\"),started?/*#__PURE__*/React.createElement(\"label\",{class:\"col-4 col-form-label\"},mowers.array[key].startOrientation):/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"select\",{class:\"form-control\",value:mowers.array[key].startOrientation,onChange:function onChange(e){return updateStartMowerPosition([mowers.array[key].startX,mowers.array[key].startY],e.target.value,key,0);}},/*#__PURE__*/React.createElement(\"option\",null,\"Nord\"),/*#__PURE__*/React.createElement(\"option\",null,\"Sud\"),/*#__PURE__*/React.createElement(\"option\",null,\"Est\"),/*#__PURE__*/React.createElement(\"option\",null,\"Ouest\")))))),/*#__PURE__*/React.createElement(\"div\",{class:\"input-group mb-3\"},started?/*#__PURE__*/React.createElement(\"label\",{class:\"col-form-label\"},\"Instructions :\"):/*#__PURE__*/React.createElement(\"div\",{class:\"input-group-append\"},/*#__PURE__*/React.createElement(\"button\",{class:\"btn btn-secondary\",type:\"button\",onClick:function onClick(){return updatePathMower(\"D\",key,1);}},\"D\"),/*#__PURE__*/React.createElement(\"button\",{class:\"btn btn-secondary\",type:\"button\",onClick:function onClick(){return updatePathMower(\"G\",key,1);}},\"G\"),/*#__PURE__*/React.createElement(\"button\",{class:\"btn btn-secondary\",type:\"button\",onClick:function onClick(){return updatePathMower(\"A\",key,1);}},\"A\")),started?/*#__PURE__*/React.createElement(\"label\",{class:\"col-4 col-form-label\"},mowers.array[key].path):/*#__PURE__*/React.createElement(\"input\",{type:\"text\",class:\"form-control\",id:\"formGroupExampleInput\",placeholder:\"Cha\\xEEne d'instructions\",value:mowers.array[key].path,onChange:function onChange(e){return updatePathMower(e.target.value,key);}})));});}// Render the mower form, including the DisplayMowerForms\nfunction GetMowers(){return/*#__PURE__*/React.createElement(\"div\",{className:\"formMowers\"},/*#__PURE__*/React.createElement(\"p\",{className:\"title\"},\"Entrer les informations sur les tondeuses :\"),/*#__PURE__*/React.createElement(\"button\",{type:\"button\",class:\"btn btn-primary\",onClick:started?function(){return alert(\"Tu ne peux pas ajouter de tondeuses en cours de route !\");}:function(){return addMower();}},started?\"Les tondeuses ne sont plus modifiables\":\"Ajouter une tondeuse\"),/*#__PURE__*/React.createElement(DisplayMowerForms,null),/*#__PURE__*/React.createElement(Grid,{container:true},/*#__PURE__*/React.createElement(Grid,{item:true},/*#__PURE__*/React.createElement(\"button\",{type:\"button\",class:\"btn btn-primary\",onClick:function onClick(){return startMow();}},currentMower===0&&currentAction===0&&!finished?\"Démarrer la tonte\":finished?\"La tonte est terminée\":\"Poursuivre la tonte\")),/*#__PURE__*/React.createElement(Grid,{item:true},started?finished?null:/*#__PURE__*/React.createElement(\"p\",{className:\"col-form-label textMowerCurrent\"},\"La tondeuse \",currentMower,\" est en train de tondre\"):null)));}// Check if the position is correct (in mower forms)\nfunction updateStartMowerPosition(pos,ori,key){var mow=mowers;if(pos[0]>=0&&pos[0]<gridSize[1])mow.array[key].startX=parseInt(pos[0]);else alert(\"La tondeuse n'est plus sur la pelouse !\");if(pos[1]>=0&&pos[1]<gridSize[0])mow.array[key].startY=parseInt(pos[1]);else alert(\"La tondeuse n'est plus sur la pelouse !\");mow.array[key].startOrientation=ori;setMowers(mow);forceUpdate();}// Handle function of the input path form\nfunction updatePathMower(char,key,mode){var letter=char.slice(-1);if(letter===\"d\"||letter===\"D\")mowers.array[key].path.push(\"D\");if(letter===\"g\"||letter===\"G\")mowers.array[key].path.push(\"G\");if(letter===\"a\"||letter===\"A\")mowers.array[key].path.push(\"A\");setMowers(mowers);if(mode===1)forceUpdate();}// Turn the mower, depending on initial orientation\nfunction pivot(direction,mower){switch(mowers.array[mower].startOrientation){case\"Nord\":if(direction===\"D\"){mowers.array[mower].startOrientation=\"Est\";}if(direction===\"G\"){mowers.array[mower].startOrientation=\"Ouest\";}break;case\"Sud\":if(direction===\"D\"){mowers.array[mower].startOrientation=\"Ouest\";}if(direction===\"G\"){mowers.array[mower].startOrientation=\"Est\";}break;case\"Est\":if(direction===\"D\"){mowers.array[mower].startOrientation=\"Sud\";}if(direction===\"G\"){mowers.array[mower].startOrientation=\"Nord\";}break;case\"Ouest\":if(direction===\"D\"){mowers.array[mower].startOrientation=\"Nord\";}if(direction===\"G\"){mowers.array[mower].startOrientation=\"Sud\";}break;default:break;}}// Forward the mower, depending on its orientation\nfunction forward(mower){var orientation=mowers.array[mower].startOrientation;if(orientation===\"Nord\"){if(mowers.array[mower].startY<gridSize[1]-1){mowers.array[mower].startY+=1;}else console.log(\"Mouvement inutile\");}if(orientation===\"Sud\"){if(mowers.array[mower].startY>0){mowers.array[mower].startY-=1;}else console.log(\"Mouvement inutile\");}if(orientation===\"Est\"){if(mowers.array[mower].startX<gridSize[0]-1){mowers.array[mower].startX+=1;}else console.log(\"Mouvement inutile\");}if(orientation===\"Ouest\"){if(mowers.array[mower].startX>0){mowers.array[mower].startX-=1;}else console.log(\"Mouvement inutile\");}}// Add new mower. It will update the mowers form automatically\nfunction addMower(){mowers.array.push({startX:0,startY:0,startOrientation:\"Nord\",path:[]});forceUpdate();}// Start the process of mowing. It's a step by step process\nfunction startMow(){// Set the mower visible\nmowerPos.visible=true;// Get the coords\nvar _ref=[mowers.array[currentMower].startX,mowers.array[currentMower].startY],x=_ref[0],y=_ref[1];// Convert it to a inversed vertical axis array (following the subject)\ny=gridSize[1]-1-y;// Set the tile mowed\ngrid[y+1][x].mowed=true;// Update the position of the mowers's sprite\nsetMowerPosition(grid[y+1][x].card.x,grid[y+1][x].card.y);// Force components to re-render\nforceUpdate();// Do actions, if mowing isn't finished\nif(finished===false){console.log(currentMower,currentAction);if(mowers.array.length>currentMower){if(mowers.array[currentMower].path.length>currentAction){nextOperation(currentMower,currentAction);setCurrentAction(currentAction+1);}else{if(mowers.array.length-1>currentMower){setCurrentMower(currentMower+1);setCurrentAction(0);}else setFinished(true);}}}}// Call the next operation of the current mower, thanks to the current action ID\nfunction nextOperation(mower,id){var action=mowers.array[mower].path[id];if(action===\"A\")forward(mower);else{pivot(action,mower);}}// Set the position of the mower\nfunction setMowerPosition(x,y){mowerPos.x=x;mowerPos.y=y;}// Display rows of tiles\nfunction DisplayRow(row,key){return/*#__PURE__*/React.createElement(Grid,{container:true},row.map(function(cell,key2){return/*#__PURE__*/React.createElement(Grid,{item:true},/*#__PURE__*/React.createElement(Card,{className:classes.cardStyle,ref:function ref(el){if(!el)return;// Update the absolutes coords of the tiles\ngrid[key][key2].card.x=el.getBoundingClientRect().x+window.pageXOffset;grid[key][key2].card.y=el.getBoundingClientRect().y+window.pageYOffset;}},/*#__PURE__*/React.createElement(CardMedia,{className:classes.cardMedia// Following the state of the mowed, change the skin of the grass\n,image:grid[key][key2].mowed?grass2:grass1})));}));}// Display the lawn\nfunction DisplayGrid(){return/*#__PURE__*/React.createElement(\"div\",{className:\"lawn\"},grid.map(function(row,key){return DisplayRow(row,key);}));}// Convert string orientation to integer degree\nfunction orientationToDegree(ori){switch(ori){case\"Nord\":return 0;case\"Est\":return 90;case\"Sud\":return 180;case\"Ouest\":return 270;default:return 0;}}// Dispay the mower\nfunction DisplayMower(){var orientation=orientationToDegree(mowers.array[currentMower].startOrientation);console.log(orientation);return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"img\",{src:mower,alt:\"mower\",style:{position:\"absolute\",width:80,height:80,left:\"\".concat(mowerPos.x,\"px\"),top:\"\".concat(mowerPos.y,\"px\"),opacity:mowerPos.visible===true?1:0,transform:\"rotate(\".concat(orientation,\"deg)\")}}));}// Render final texts with final positions\nfunction EndMow(){return/*#__PURE__*/React.createElement(\"div\",{className:\"endMow\"},/*#__PURE__*/React.createElement(\"p\",{className:\"title\"},\"La tonte est termin\\xE9e\"),mowers.array.map(function(mower,key){return/*#__PURE__*/React.createElement(\"p\",null,\"La tondeuse \",key+1,\" s'est arr\\xEAt\\xE9e en \",mower.startX,\",\",mower.startY,\", orient\\xE9e \",mower.startOrientation);}));}}","map":{"version":3,"sources":["/home/aymeric/Git/MowGrassIT/src/App.js"],"names":["React","useState","useEffect","CardMedia","makeStyles","Card","Grid","grass1","grass2","mower","subject","App","gridSize","setGridSize","createGrid","grid","setGrid","x","y","visible","mowerPos","array","startX","startY","startOrientation","path","mowers","setMowers","currentMower","setCurrentMower","currentAction","setCurrentAction","finished","setFinished","started","setStarted","useStyles","cardStyle","maxWidth","boxShadow","cardMedia","height","width","classes","updateState","forceUpdate","useCallback","DisplayTopInfos","GetGridSizeArea","e","updateSizeArea","target","value","size","i","row","j","push","card","mowed","alert","DisplayMowerForms","map","key","updateStartMowerPosition","updatePathMower","GetMowers","addMower","startMow","pos","ori","mow","parseInt","char","mode","letter","slice","pivot","direction","forward","orientation","console","log","setMowerPosition","length","nextOperation","id","action","DisplayRow","cell","key2","el","getBoundingClientRect","window","pageXOffset","pageYOffset","DisplayGrid","orientationToDegree","DisplayMower","position","left","top","opacity","transform","EndMow"],"mappings":"mJAAA;AACA;AACA;AAEA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAO,WAAP,CACA,OAASC,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CACA,OAASC,SAAT,CAAoBC,UAApB,CAAgCC,IAAhC,CAAsCC,IAAtC,KAAkD,mBAAlD,CAEA,MAAOC,CAAAA,MAAP,KAAmB,kBAAnB,CACA,MAAOC,CAAAA,MAAP,KAAmB,kBAAnB,CACA,MAAOC,CAAAA,KAAP,KAAkB,iBAAlB,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CAEA,cAAe,SAASC,CAAAA,GAAT,EAAe,CAC5B;AACA;AAF4B,cAGIV,QAAQ,CAAC,CAAC,CAAD,CAAI,CAAJ,CAAD,CAHZ,wCAGrBW,QAHqB,eAGXC,WAHW,eAI5B;AAJ4B,eAKJZ,QAAQ,CAACa,UAAU,CAACF,QAAD,CAAX,CALJ,yCAKrBG,IALqB,eAKfC,OALe,eAM5B;AAN4B,eAOTf,QAAQ,CAAC,CAC1BgB,CAAC,CAAE,CADuB,CAE1BC,CAAC,CAAE,CAFuB,CAG1BC,OAAO,CAAE,KAHiB,CAAD,CAPC,yCAOrBC,QAPqB,eAY5B;AAZ4B,eAaAnB,QAAQ,CAAC,CACnCoB,KAAK,CAAE,CACL,CACEC,MAAM,CAAE,CADV,CAEEC,MAAM,CAAE,CAFV,CAGEC,gBAAgB,CAAE,MAHpB,CAIEC,IAAI,CAAE,EAJR,CADK,CAD4B,CAAD,CAbR,yCAarBC,MAbqB,eAabC,SAba,eAuB5B;AAvB4B,eAwBY1B,QAAQ,CAAC,CAAD,CAxBpB,0CAwBrB2B,YAxBqB,gBAwBPC,eAxBO,gBAyB5B;AAzB4B,gBA0Bc5B,QAAQ,CAAC,CAAD,CA1BtB,2CA0BrB6B,aA1BqB,gBA0BNC,gBA1BM,gBA2B5B;AA3B4B,gBA4BI9B,QAAQ,CAAC,KAAD,CA5BZ,2CA4BrB+B,QA5BqB,gBA4BXC,WA5BW,gBA6B5B;AA7B4B,gBA8BEhC,QAAQ,CAAC,KAAD,CA9BV,2CA8BrBiC,OA9BqB,gBA8BZC,UA9BY,gBA+B5B;AACAjC,SAAS,CAAC,UAAM,CACdiC,UAAU,CAAC,EAAEL,aAAa,GAAK,CAAlB,EAAuBF,YAAY,GAAK,CAA1C,GAAgDI,QAAjD,CAAV,CACD,CAFQ,CAEN,CAACE,OAAD,CAAUJ,aAAV,CAAyBF,YAAzB,CAAuCI,QAAvC,CAFM,CAAT,CAIA;AACA,GAAMI,CAAAA,SAAS,CAAGhC,UAAU,CAAC,CAC3BiC,SAAS,CAAE,CACTC,QAAQ,CAAE,GADD,CAGTC,SAAS,CAAE,mBAHF,CADgB,CAM3BC,SAAS,CAAE,CACTC,MAAM,CAAE,EADC,CAETC,KAAK,CAAE,EAFE,CANgB,CAAD,CAA5B,CAYA,GAAMC,CAAAA,OAAO,CAAGP,SAAS,EAAzB,CAEA;AAnD4B,oBAoDJpC,KAAK,CAACC,QAAN,EApDI,oDAoDnB2C,WApDmB,qBAqD5B,GAAMC,CAAAA,WAAW,CAAG7C,KAAK,CAAC8C,WAAN,CAAkB,iBAAMF,CAAAA,WAAW,CAAC,EAAD,CAAjB,EAAlB,CAAyC,EAAzC,CAApB,CAEA,oBACE;AACA,2BAAK,SAAS,CAAC,KAAf,eACE,oBAAC,eAAD,MADF,cAEE,oBAAC,eAAD,MAFF,cAGE,oBAAC,SAAD,MAHF,cAIE,oBAAC,WAAD,MAJF,cAKE,oBAAC,YAAD,MALF,CAMGZ,QAAQ,cAAG,oBAAC,MAAD,MAAH,CAAgB,IAN3B,CAFF,EAYA;AACA,QAASe,CAAAA,eAAT,EAA2B,CACzB,mBACE,4CACE,4CADF,cAEE,yBAAG,IAAI,CAAErC,OAAT,CAAkB,MAAM,CAAC,QAAzB,CAAkC,GAAG,CAAC,qBAAtC,eACE,8BAAQ,IAAI,CAAC,QAAb,CAAsB,KAAK,CAAC,iBAA5B,6BADF,CAFF,CADF,CAUD,CAED;AACA,QAASsC,CAAAA,eAAT,EAA2B,CACzB,mBACE,4CACE,yBAAG,SAAS,CAAC,cAAb,2BADF,cAEE,2BAAK,KAAK,CAAC,yBAAX,eACE,6BAAO,GAAG,CAAC,sBAAX,CAAkC,KAAK,CAAC,sBAAxC,cADF,CAIGd,OAAO,cACN,6BAAO,KAAK,CAAC,gBAAb,EAA+BtB,QAAQ,CAAC,CAAD,CAAvC,CADM,cAGN,4CACE,6BACE,KAAK,CAAC,cADR,CAEE,IAAI,CAAC,QAFP,CAGE,KAAK,CAAEA,QAAQ,CAAC,CAAD,CAHjB,CAIE,QAAQ,CAAE,kBAACqC,CAAD,QAAOC,CAAAA,cAAc,CAAC,CAACD,CAAC,CAACE,MAAF,CAASC,KAAV,CAAiBxC,QAAQ,CAAC,CAAD,CAAzB,CAAD,CAArB,EAJZ,EADF,CAPJ,CAFF,cAmBE,2BAAK,KAAK,CAAC,yBAAX,eACE,6BAAO,GAAG,CAAC,sBAAX,CAAkC,KAAK,CAAC,sBAAxC,cADF,CAIGsB,OAAO,cACN,6BAAO,KAAK,CAAC,gBAAb,EAA+BtB,QAAQ,CAAC,CAAD,CAAvC,CADM,cAGN,4CACE,6BACE,KAAK,CAAC,cADR,CAEE,IAAI,CAAC,QAFP,CAGE,KAAK,CAAEA,QAAQ,CAAC,CAAD,CAHjB,CAIE,QAAQ,CAAE,kBAACqC,CAAD,QAAOC,CAAAA,cAAc,CAAC,CAACtC,QAAQ,CAAC,CAAD,CAAT,CAAcqC,CAAC,CAACE,MAAF,CAASC,KAAvB,CAAD,CAArB,EAJZ,EADF,CAPJ,CAnBF,CADF,CAuCD,CAED;AACA,QAAStC,CAAAA,UAAT,CAAoBuC,IAApB,CAA0B,CACxB,GAAItC,CAAAA,IAAI,CAAG,CAAC,EAAD,CAAX,CACA,IAAK,GAAIuC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGD,IAAI,CAAC,CAAD,CAAxB,CAA6BC,CAAC,EAA9B,CAAkC,CAChC,GAAIC,CAAAA,GAAG,CAAG,EAAV,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGH,IAAI,CAAC,CAAD,CAAxB,CAA6BG,CAAC,EAA9B,CAAkC,CAChCD,GAAG,CAACE,IAAJ,CAAS,CACPC,IAAI,CAAE,CACJzC,CAAC,CAAE,CADC,CAEJC,CAAC,CAAE,CAFC,CADC,CAKPyC,KAAK,CAAE,KALA,CAAT,EAOD,CACD5C,IAAI,CAAC0C,IAAL,CAAUF,GAAV,EACD,CACD,MAAOxC,CAAAA,IAAP,CACD,CAED;AACA,QAASmC,CAAAA,cAAT,CAAwBG,IAAxB,CAA8B,CAC5B,GAAIA,IAAI,CAAC,CAAD,CAAJ,CAAU,CAAV,EAAeA,IAAI,CAAC,CAAD,CAAJ,CAAU,CAA7B,CAAgC,CAC9B,GAAIA,IAAI,CAAC,CAAD,CAAJ,EAAW,EAAX,EAAiBA,IAAI,CAAC,CAAD,CAAJ,EAAW,EAAhC,CAAoC,CAClCxC,WAAW,CAACwC,IAAD,CAAX,CACArC,OAAO,CAACF,UAAU,CAACuC,IAAD,CAAX,CAAP,CACD,CAHD,IAGOO,CAAAA,KAAK,CAAC,qCAAD,CAAL,CACR,CALD,IAKOA,CAAAA,KAAK,CAAC,oCAAD,CAAL,CACR,CAED;AACA,QAASC,CAAAA,iBAAT,EAA6B,CAC3B,MAAOnC,CAAAA,MAAM,CAACL,KAAP,CAAayC,GAAb,CAAiB,SAACrD,KAAD,CAAQsD,GAAR,CAAgB,CACtC,mBACE,2BAAK,SAAS,CAAC,WAAf,eACE,oBAAC,IAAD,EAAM,SAAS,KAAf,eACE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,CAAf,eACE,yBAAG,SAAS,CAAC,UAAb,cAAkCA,GAAG,CAAG,CAAxC,CADF,CADF,cAIE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,KAAb,eACE,2BAAK,KAAK,CAAC,yBAAX,eACE,6BAAO,GAAG,CAAC,sBAAX,CAAkC,KAAK,CAAC,sBAAxC,iBADF,CAKG7B,OAAO,cACN,6BAAO,KAAK,CAAC,sBAAb,EACGR,MAAM,CAACL,KAAP,CAAa0C,GAAb,EAAkBzC,MADrB,CADM,cAKN,4CACE,6BACE,KAAK,CAAC,cADR,CAEE,IAAI,CAAC,QAFP,CAGE,KAAK,CAAEI,MAAM,CAACL,KAAP,CAAa0C,GAAb,EAAkBzC,MAH3B,CAIE,QAAQ,CAAE,kBAAC2B,CAAD,QACRe,CAAAA,wBAAwB,CACtB,CAACf,CAAC,CAACE,MAAF,CAASC,KAAV,CAAiB1B,MAAM,CAACL,KAAP,CAAa0C,GAAb,EAAkBxC,MAAnC,CADsB,CAEtBG,MAAM,CAACL,KAAP,CAAa0C,GAAb,EAAkBvC,gBAFI,CAGtBuC,GAHsB,CAItB,CAJsB,CADhB,EAJZ,EADF,CAVJ,CADF,CAJF,cAiCE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,KAAb,eACE,2BAAK,KAAK,CAAC,yBAAX,eACE,6BAAO,GAAG,CAAC,sBAAX,CAAkC,KAAK,CAAC,sBAAxC,iBADF,CAKG7B,OAAO,cACN,6BAAO,KAAK,CAAC,sBAAb,EACGR,MAAM,CAACL,KAAP,CAAa0C,GAAb,EAAkBxC,MADrB,CADM,cAKN,4CACE,6BACE,KAAK,CAAC,cADR,CAEE,IAAI,CAAC,QAFP,CAGE,KAAK,CAAEG,MAAM,CAACL,KAAP,CAAa0C,GAAb,EAAkBxC,MAH3B,CAIE,QAAQ,CAAE,kBAAC0B,CAAD,QACRe,CAAAA,wBAAwB,CACtB,CAACtC,MAAM,CAACL,KAAP,CAAa0C,GAAb,EAAkBzC,MAAnB,CAA2B2B,CAAC,CAACE,MAAF,CAASC,KAApC,CADsB,CAEtB1B,MAAM,CAACL,KAAP,CAAa0C,GAAb,EAAkBvC,gBAFI,CAGtBuC,GAHsB,CAItB,CAJsB,CADhB,EAJZ,EADF,CAVJ,CADF,CAjCF,cA8DE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,KAAb,eACE,2BAAK,KAAK,CAAC,yBAAX,eACE,6BAAO,GAAG,CAAC,sBAAX,CAAkC,KAAK,CAAC,sBAAxC,kBADF,CAKG7B,OAAO,cACN,6BAAO,KAAK,CAAC,sBAAb,EACGR,MAAM,CAACL,KAAP,CAAa0C,GAAb,EAAkBvC,gBADrB,CADM,cAKN,4CACE,8BACE,KAAK,CAAC,cADR,CAEE,KAAK,CAAEE,MAAM,CAACL,KAAP,CAAa0C,GAAb,EAAkBvC,gBAF3B,CAGE,QAAQ,CAAE,kBAACyB,CAAD,QACRe,CAAAA,wBAAwB,CACtB,CAACtC,MAAM,CAACL,KAAP,CAAa0C,GAAb,EAAkBzC,MAAnB,CAA2BI,MAAM,CAACL,KAAP,CAAa0C,GAAb,EAAkBxC,MAA7C,CADsB,CAEtB0B,CAAC,CAACE,MAAF,CAASC,KAFa,CAGtBW,GAHsB,CAItB,CAJsB,CADhB,EAHZ,eAYE,yCAZF,cAaE,wCAbF,cAcE,wCAdF,cAeE,0CAfF,CADF,CAVJ,CADF,CA9DF,CADF,cAiGE,2BAAK,KAAK,CAAC,kBAAX,EACG7B,OAAO,cACN,6BAAO,KAAK,CAAC,gBAAb,mBADM,cAGN,2BAAK,KAAK,CAAC,oBAAX,eACE,8BACE,KAAK,CAAC,mBADR,CAEE,IAAI,CAAC,QAFP,CAGE,OAAO,CAAE,yBAAM+B,CAAAA,eAAe,CAAC,GAAD,CAAMF,GAAN,CAAW,CAAX,CAArB,EAHX,MADF,cAQE,8BACE,KAAK,CAAC,mBADR,CAEE,IAAI,CAAC,QAFP,CAGE,OAAO,CAAE,yBAAME,CAAAA,eAAe,CAAC,GAAD,CAAMF,GAAN,CAAW,CAAX,CAArB,EAHX,MARF,cAeE,8BACE,KAAK,CAAC,mBADR,CAEE,IAAI,CAAC,QAFP,CAGE,OAAO,CAAE,yBAAME,CAAAA,eAAe,CAAC,GAAD,CAAMF,GAAN,CAAW,CAAX,CAArB,EAHX,MAfF,CAJJ,CA4BG7B,OAAO,cACN,6BAAO,KAAK,CAAC,sBAAb,EACGR,MAAM,CAACL,KAAP,CAAa0C,GAAb,EAAkBtC,IADrB,CADM,cAKN,6BACE,IAAI,CAAC,MADP,CAEE,KAAK,CAAC,cAFR,CAGE,EAAE,CAAC,uBAHL,CAIE,WAAW,CAAC,0BAJd,CAKE,KAAK,CAAEC,MAAM,CAACL,KAAP,CAAa0C,GAAb,EAAkBtC,IAL3B,CAME,QAAQ,CAAE,kBAACwB,CAAD,QAAOgB,CAAAA,eAAe,CAAChB,CAAC,CAACE,MAAF,CAASC,KAAV,CAAiBW,GAAjB,CAAtB,EANZ,EAjCJ,CAjGF,CADF,CA+ID,CAhJM,CAAP,CAiJD,CAED;AACA,QAASG,CAAAA,SAAT,EAAqB,CACnB,mBACE,2BAAK,SAAS,CAAC,YAAf,eACE,yBAAG,SAAS,CAAC,OAAb,gDADF,cAEE,8BACE,IAAI,CAAC,QADP,CAEE,KAAK,CAAC,iBAFR,CAGE,OAAO,CACLhC,OAAO,CACH,iBACE0B,CAAAA,KAAK,CACH,yDADG,CADP,EADG,CAKH,iBAAMO,CAAAA,QAAQ,EAAd,EATR,EAYGjC,OAAO,CACJ,wCADI,CAEJ,sBAdN,CAFF,cAkBE,oBAAC,iBAAD,MAlBF,cAmBE,oBAAC,IAAD,EAAM,SAAS,KAAf,eACE,oBAAC,IAAD,EAAM,IAAI,KAAV,eACE,8BACE,IAAI,CAAC,QADP,CAEE,KAAK,CAAC,iBAFR,CAGE,OAAO,CAAE,yBAAMkC,CAAAA,QAAQ,EAAd,EAHX,EAKGxC,YAAY,GAAK,CAAjB,EAAsBE,aAAa,GAAK,CAAxC,EAA6C,CAACE,QAA9C,CACG,mBADH,CAEGA,QAAQ,CACR,uBADQ,CAER,qBATN,CADF,CADF,cAcE,oBAAC,IAAD,EAAM,IAAI,KAAV,EACGE,OAAO,CACNF,QAAQ,CAAG,IAAH,cACN,yBAAG,SAAS,CAAC,iCAAb,iBACeJ,YADf,2BAFI,CAMJ,IAPN,CAdF,CAnBF,CADF,CA8CD,CAED;AACA,QAASoC,CAAAA,wBAAT,CAAkCK,GAAlC,CAAuCC,GAAvC,CAA4CP,GAA5C,CAAiD,CAC/C,GAAIQ,CAAAA,GAAG,CAAG7C,MAAV,CACA,GAAI2C,GAAG,CAAC,CAAD,CAAH,EAAU,CAAV,EAAeA,GAAG,CAAC,CAAD,CAAH,CAASzD,QAAQ,CAAC,CAAD,CAApC,CACE2D,GAAG,CAAClD,KAAJ,CAAU0C,GAAV,EAAezC,MAAf,CAAwBkD,QAAQ,CAACH,GAAG,CAAC,CAAD,CAAJ,CAAhC,CADF,IAEKT,CAAAA,KAAK,CAAC,yCAAD,CAAL,CACL,GAAIS,GAAG,CAAC,CAAD,CAAH,EAAU,CAAV,EAAeA,GAAG,CAAC,CAAD,CAAH,CAASzD,QAAQ,CAAC,CAAD,CAApC,CACE2D,GAAG,CAAClD,KAAJ,CAAU0C,GAAV,EAAexC,MAAf,CAAwBiD,QAAQ,CAACH,GAAG,CAAC,CAAD,CAAJ,CAAhC,CADF,IAEKT,CAAAA,KAAK,CAAC,yCAAD,CAAL,CACLW,GAAG,CAAClD,KAAJ,CAAU0C,GAAV,EAAevC,gBAAf,CAAkC8C,GAAlC,CACA3C,SAAS,CAAC4C,GAAD,CAAT,CACA1B,WAAW,GACZ,CAED;AACA,QAASoB,CAAAA,eAAT,CAAyBQ,IAAzB,CAA+BV,GAA/B,CAAoCW,IAApC,CAA0C,CACxC,GAAIC,CAAAA,MAAM,CAAGF,IAAI,CAACG,KAAL,CAAW,CAAC,CAAZ,CAAb,CACA,GAAID,MAAM,GAAK,GAAX,EAAkBA,MAAM,GAAK,GAAjC,CAAsCjD,MAAM,CAACL,KAAP,CAAa0C,GAAb,EAAkBtC,IAAlB,CAAuBgC,IAAvB,CAA4B,GAA5B,EACtC,GAAIkB,MAAM,GAAK,GAAX,EAAkBA,MAAM,GAAK,GAAjC,CAAsCjD,MAAM,CAACL,KAAP,CAAa0C,GAAb,EAAkBtC,IAAlB,CAAuBgC,IAAvB,CAA4B,GAA5B,EACtC,GAAIkB,MAAM,GAAK,GAAX,EAAkBA,MAAM,GAAK,GAAjC,CAAsCjD,MAAM,CAACL,KAAP,CAAa0C,GAAb,EAAkBtC,IAAlB,CAAuBgC,IAAvB,CAA4B,GAA5B,EACtC9B,SAAS,CAACD,MAAD,CAAT,CACA,GAAIgD,IAAI,GAAK,CAAb,CAAgB7B,WAAW,GAC5B,CAEC;AACF,QAASgC,CAAAA,KAAT,CAAeC,SAAf,CAA0BrE,KAA1B,CAAiC,CAC/B,OAAQiB,MAAM,CAACL,KAAP,CAAaZ,KAAb,EAAoBe,gBAA5B,EACE,IAAK,MAAL,CACE,GAAIsD,SAAS,GAAK,GAAlB,CAAuB,CACrBpD,MAAM,CAACL,KAAP,CAAaZ,KAAb,EAAoBe,gBAApB,CAAuC,KAAvC,CACD,CACD,GAAIsD,SAAS,GAAK,GAAlB,CAAuB,CACrBpD,MAAM,CAACL,KAAP,CAAaZ,KAAb,EAAoBe,gBAApB,CAAuC,OAAvC,CACD,CACD,MACF,IAAK,KAAL,CACE,GAAIsD,SAAS,GAAK,GAAlB,CAAuB,CACrBpD,MAAM,CAACL,KAAP,CAAaZ,KAAb,EAAoBe,gBAApB,CAAuC,OAAvC,CACD,CACD,GAAIsD,SAAS,GAAK,GAAlB,CAAuB,CACrBpD,MAAM,CAACL,KAAP,CAAaZ,KAAb,EAAoBe,gBAApB,CAAuC,KAAvC,CACD,CACD,MACF,IAAK,KAAL,CACE,GAAIsD,SAAS,GAAK,GAAlB,CAAuB,CACrBpD,MAAM,CAACL,KAAP,CAAaZ,KAAb,EAAoBe,gBAApB,CAAuC,KAAvC,CACD,CACD,GAAIsD,SAAS,GAAK,GAAlB,CAAuB,CACrBpD,MAAM,CAACL,KAAP,CAAaZ,KAAb,EAAoBe,gBAApB,CAAuC,MAAvC,CACD,CACD,MACF,IAAK,OAAL,CACE,GAAIsD,SAAS,GAAK,GAAlB,CAAuB,CACrBpD,MAAM,CAACL,KAAP,CAAaZ,KAAb,EAAoBe,gBAApB,CAAuC,MAAvC,CACD,CACD,GAAIsD,SAAS,GAAK,GAAlB,CAAuB,CACrBpD,MAAM,CAACL,KAAP,CAAaZ,KAAb,EAAoBe,gBAApB,CAAuC,KAAvC,CACD,CACD,MACF,QACE,MAlCJ,CAoCD,CAED;AACA,QAASuD,CAAAA,OAAT,CAAiBtE,KAAjB,CAAwB,CACtB,GAAIuE,CAAAA,WAAW,CAAGtD,MAAM,CAACL,KAAP,CAAaZ,KAAb,EAAoBe,gBAAtC,CACA,GAAIwD,WAAW,GAAK,MAApB,CAA4B,CAC1B,GAAItD,MAAM,CAACL,KAAP,CAAaZ,KAAb,EAAoBc,MAApB,CAA6BX,QAAQ,CAAC,CAAD,CAAR,CAAc,CAA/C,CAAkD,CAChDc,MAAM,CAACL,KAAP,CAAaZ,KAAb,EAAoBc,MAApB,EAA8B,CAA9B,CACD,CAFD,IAEO0D,CAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EACR,CACD,GAAIF,WAAW,GAAK,KAApB,CAA2B,CACzB,GAAItD,MAAM,CAACL,KAAP,CAAaZ,KAAb,EAAoBc,MAApB,CAA6B,CAAjC,CAAoC,CAClCG,MAAM,CAACL,KAAP,CAAaZ,KAAb,EAAoBc,MAApB,EAA8B,CAA9B,CACD,CAFD,IAEO0D,CAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EACR,CACD,GAAIF,WAAW,GAAK,KAApB,CAA2B,CACzB,GAAItD,MAAM,CAACL,KAAP,CAAaZ,KAAb,EAAoBa,MAApB,CAA6BV,QAAQ,CAAC,CAAD,CAAR,CAAc,CAA/C,CAAkD,CAChDc,MAAM,CAACL,KAAP,CAAaZ,KAAb,EAAoBa,MAApB,EAA8B,CAA9B,CACD,CAFD,IAEO2D,CAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EACR,CACD,GAAIF,WAAW,GAAK,OAApB,CAA6B,CAC3B,GAAItD,MAAM,CAACL,KAAP,CAAaZ,KAAb,EAAoBa,MAApB,CAA6B,CAAjC,CAAoC,CAClCI,MAAM,CAACL,KAAP,CAAaZ,KAAb,EAAoBa,MAApB,EAA8B,CAA9B,CACD,CAFD,IAEO2D,CAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EACR,CACF,CAED;AACA,QAASf,CAAAA,QAAT,EAAoB,CAClBzC,MAAM,CAACL,KAAP,CAAaoC,IAAb,CAAkB,CAChBnC,MAAM,CAAE,CADQ,CAEhBC,MAAM,CAAE,CAFQ,CAGhBC,gBAAgB,CAAE,MAHF,CAIhBC,IAAI,CAAE,EAJU,CAAlB,EAMAoB,WAAW,GACZ,CAED;AACA,QAASuB,CAAAA,QAAT,EAAoB,CAClB;AACAhD,QAAQ,CAACD,OAAT,CAAmB,IAAnB,CACA;AAHkB,SAIL,CACXO,MAAM,CAACL,KAAP,CAAaO,YAAb,EAA2BN,MADhB,CAEXI,MAAM,CAACL,KAAP,CAAaO,YAAb,EAA2BL,MAFhB,CAJK,CAIbN,CAJa,SAIVC,CAJU,SAQlB;AACAA,CAAC,CAAGN,QAAQ,CAAC,CAAD,CAAR,CAAc,CAAd,CAAkBM,CAAtB,CACA;AACAH,IAAI,CAACG,CAAC,CAAG,CAAL,CAAJ,CAAYD,CAAZ,EAAe0C,KAAf,CAAuB,IAAvB,CACA;AACAwB,gBAAgB,CAACpE,IAAI,CAACG,CAAC,CAAG,CAAL,CAAJ,CAAYD,CAAZ,EAAeyC,IAAf,CAAoBzC,CAArB,CAAwBF,IAAI,CAACG,CAAC,CAAG,CAAL,CAAJ,CAAYD,CAAZ,EAAeyC,IAAf,CAAoBxC,CAA5C,CAAhB,CACA;AACA2B,WAAW,GAEX;AACA,GAAIb,QAAQ,GAAK,KAAjB,CAAwB,CACtBiD,OAAO,CAACC,GAAR,CAAYtD,YAAZ,CAA0BE,aAA1B,EACA,GAAIJ,MAAM,CAACL,KAAP,CAAa+D,MAAb,CAAsBxD,YAA1B,CAAwC,CACtC,GAAIF,MAAM,CAACL,KAAP,CAAaO,YAAb,EAA2BH,IAA3B,CAAgC2D,MAAhC,CAAyCtD,aAA7C,CAA4D,CAC1DuD,aAAa,CAACzD,YAAD,CAAeE,aAAf,CAAb,CACAC,gBAAgB,CAACD,aAAa,CAAG,CAAjB,CAAhB,CACD,CAHD,IAGO,CACL,GAAIJ,MAAM,CAACL,KAAP,CAAa+D,MAAb,CAAsB,CAAtB,CAA0BxD,YAA9B,CAA4C,CAC1CC,eAAe,CAACD,YAAY,CAAG,CAAhB,CAAf,CACAG,gBAAgB,CAAC,CAAD,CAAhB,CACD,CAHD,IAGOE,CAAAA,WAAW,CAAC,IAAD,CAAX,CACR,CACF,CACF,CACF,CAED;AACA,QAASoD,CAAAA,aAAT,CAAuB5E,KAAvB,CAA8B6E,EAA9B,CAAkC,CAChC,GAAMC,CAAAA,MAAM,CAAG7D,MAAM,CAACL,KAAP,CAAaZ,KAAb,EAAoBgB,IAApB,CAAyB6D,EAAzB,CAAf,CACA,GAAIC,MAAM,GAAK,GAAf,CAAoBR,OAAO,CAACtE,KAAD,CAAP,CAApB,IACK,CACHoE,KAAK,CAACU,MAAD,CAAS9E,KAAT,CAAL,CACD,CACF,CAED;AACA,QAAS0E,CAAAA,gBAAT,CAA0BlE,CAA1B,CAA6BC,CAA7B,CAAgC,CAC9BE,QAAQ,CAACH,CAAT,CAAaA,CAAb,CACAG,QAAQ,CAACF,CAAT,CAAaA,CAAb,CACD,CAED;AACA,QAASsE,CAAAA,UAAT,CAAoBjC,GAApB,CAAyBQ,GAAzB,CAA8B,CAC5B,mBACE,oBAAC,IAAD,EAAM,SAAS,KAAf,EACGR,GAAG,CAACO,GAAJ,CAAQ,SAAC2B,IAAD,CAAOC,IAAP,CAAgB,CACvB,mBACE,oBAAC,IAAD,EAAM,IAAI,KAAV,eACE,oBAAC,IAAD,EACE,SAAS,CAAE/C,OAAO,CAACN,SADrB,CAEE,GAAG,CAAE,aAACsD,EAAD,CAAQ,CACX,GAAI,CAACA,EAAL,CAAS,OACT;AACA5E,IAAI,CAACgD,GAAD,CAAJ,CAAU2B,IAAV,EAAgBhC,IAAhB,CAAqBzC,CAArB,CACE0E,EAAE,CAACC,qBAAH,GAA2B3E,CAA3B,CAA+B4E,MAAM,CAACC,WADxC,CAEA/E,IAAI,CAACgD,GAAD,CAAJ,CAAU2B,IAAV,EAAgBhC,IAAhB,CAAqBxC,CAArB,CACEyE,EAAE,CAACC,qBAAH,GAA2B1E,CAA3B,CAA+B2E,MAAM,CAACE,WADxC,CAED,CATH,eAWE,oBAAC,SAAD,EACE,SAAS,CAAEpD,OAAO,CAACH,SACnB;AAFF,CAGE,KAAK,CAAEzB,IAAI,CAACgD,GAAD,CAAJ,CAAU2B,IAAV,EAAgB/B,KAAhB,CAAwBnD,MAAxB,CAAiCD,MAH1C,EAXF,CADF,CADF,CAqBD,CAtBA,CADH,CADF,CA2BD,CAED;AACA,QAASyF,CAAAA,WAAT,EAAuB,CACrB,mBACE,2BAAK,SAAS,CAAC,MAAf,EACGjF,IAAI,CAAC+C,GAAL,CAAS,SAACP,GAAD,CAAMQ,GAAN,CAAc,CACtB,MAAOyB,CAAAA,UAAU,CAACjC,GAAD,CAAMQ,GAAN,CAAjB,CACD,CAFA,CADH,CADF,CAOD,CAED;AACA,QAASkC,CAAAA,mBAAT,CAA6B3B,GAA7B,CAAkC,CAChC,OAAQA,GAAR,EACE,IAAK,MAAL,CACE,MAAO,EAAP,CACF,IAAK,KAAL,CACE,MAAO,GAAP,CACF,IAAK,KAAL,CACE,MAAO,IAAP,CACF,IAAK,OAAL,CACE,MAAO,IAAP,CACF,QACE,MAAO,EAAP,CAVJ,CAYD,CAED;AACA,QAAS4B,CAAAA,YAAT,EAAwB,CACtB,GAAMlB,CAAAA,WAAW,CAAGiB,mBAAmB,CACrCvE,MAAM,CAACL,KAAP,CAAaO,YAAb,EAA2BJ,gBADU,CAAvC,CAGAyD,OAAO,CAACC,GAAR,CAAYF,WAAZ,EAEA,mBACE,4CACE,2BACE,GAAG,CAAEvE,KADP,CAEE,GAAG,CAAC,OAFN,CAGE,KAAK,CAAE,CACL0F,QAAQ,CAAE,UADL,CAELzD,KAAK,CAAE,EAFF,CAGLD,MAAM,CAAE,EAHH,CAIL2D,IAAI,WAAKhF,QAAQ,CAACH,CAAd,MAJC,CAKLoF,GAAG,WAAKjF,QAAQ,CAACF,CAAd,MALE,CAMLoF,OAAO,CAAElF,QAAQ,CAACD,OAAT,GAAqB,IAArB,CAA4B,CAA5B,CAAgC,CANpC,CAOLoF,SAAS,kBAAYvB,WAAZ,QAPJ,CAHT,EADF,CADF,CAiBD,CAED;AACA,QAASwB,CAAAA,MAAT,EAAkB,CAChB,mBACE,2BAAK,SAAS,CAAC,QAAf,eACE,yBAAG,SAAS,CAAC,OAAb,6BADF,CAEG9E,MAAM,CAACL,KAAP,CAAayC,GAAb,CAAiB,SAACrD,KAAD,CAAQsD,GAAR,CAAgB,CAChC,mBACE,4CACeA,GAAG,CAAG,CADrB,4BAC0CtD,KAAK,CAACa,MADhD,KAEGb,KAAK,CAACc,MAFT,kBAE4Bd,KAAK,CAACe,gBAFlC,CADF,CAMD,CAPA,CAFH,CADF,CAaD,CACF","sourcesContent":["// Author : Aymeric LE FEYER\n// Date : 14/05/2020\n// Client: Progress-IT\n\nimport React from \"react\";\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport { CardMedia, makeStyles, Card, Grid } from \"@material-ui/core\";\n\nimport grass1 from \"./res/grass1.jpg\";\nimport grass2 from \"./res/grass2.jpg\";\nimport mower from \"./res/mower.png\";\nimport subject from \"./subject.pdf\";\n\nexport default function App() {\n  // Hooks\n  // Get the size of the grid\n  const [gridSize, setGridSize] = useState([5, 5]);\n  // Get the grid (absolute positions of tiles and know if the tile is mowed)\n  const [grid, setGrid] = useState(createGrid(gridSize));\n  // Position of the current mower\n  const [mowerPos] = useState({\n    x: 0,\n    y: 0,\n    visible: false,\n  });\n  // Array of all mowers, with informations\n  const [mowers, setMowers] = useState({\n    array: [\n      {\n        startX: 0,\n        startY: 0,\n        startOrientation: \"Nord\",\n        path: [],\n      },\n    ],\n  });\n  // Index of the current mower in the final mowing\n  const [currentMower, setCurrentMower] = useState(0);\n  // Index of the current mower in the final mowing\n  const [currentAction, setCurrentAction] = useState(0);\n  // Know if the mowing is finished or not\n  const [finished, setFinished] = useState(false);\n  // Know if the mowing has started or not\n  const [started, setStarted] = useState(false);\n  // Update the started hook\n  useEffect(() => {\n    setStarted(!(currentAction === 0 && currentMower === 0) || finished);\n  }, [started, currentAction, currentMower, finished]);\n\n  // Style of the tiles\n  const useStyles = makeStyles({\n    cardStyle: {\n      maxWidth: 345,\n\n      boxShadow: \"1px 1px 2px black\",\n    },\n    cardMedia: {\n      height: 80,\n      width: 80,\n    },\n  });\n\n  const classes = useStyles();\n\n  // Force the rendering of components\n  const [, updateState] = React.useState();\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n\n  return (\n    // Root of the project\n    <div className=\"App\">\n      <DisplayTopInfos />\n      <GetGridSizeArea />\n      <GetMowers />\n      <DisplayGrid />\n      <DisplayMower />\n      {finished ? <EndMow /> : null}\n    </div>\n  );\n\n  // Display the title and the subject downloading button\n  function DisplayTopInfos() {\n    return (\n      <div>\n        <h1>MowGrass-IT</h1>\n        <a href={subject} target=\"_blank\" rel=\"noopener noreferrer\">\n          <button type=\"button\" class=\"btn btn-primary\">\n            Récupérer le sujet\n          </button>\n        </a>\n      </div>\n    );\n  }\n\n  // Display the grid size form\n  function GetGridSizeArea() {\n    return (\n      <div>\n        <p className=\"textSizeGrid\">Taille de la grille : </p>\n        <div class=\"form-group row sizeForm\">\n          <label for=\"example-number-input\" class=\"col-2 col-form-label\">\n            Hauteur :\n          </label>\n          {started ? (\n            <label class=\"col-form-label\">{gridSize[0]}</label>\n          ) : (\n            <div>\n              <input\n                class=\"form-control\"\n                type=\"number\"\n                value={gridSize[0]}\n                onChange={(e) => updateSizeArea([e.target.value, gridSize[1]])}\n              />\n            </div>\n          )}\n        </div>\n        <div class=\"form-group row sizeForm\">\n          <label for=\"example-number-input\" class=\"col-2 col-form-label\">\n            Largeur :\n          </label>\n          {started ? (\n            <label class=\"col-form-label\">{gridSize[1]}</label>\n          ) : (\n            <div>\n              <input\n                class=\"form-control\"\n                type=\"number\"\n                value={gridSize[1]}\n                onChange={(e) => updateSizeArea([gridSize[0], e.target.value])}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  // Create the grid thanks to the grid size\n  function createGrid(size) {\n    let grid = [[]];\n    for (let i = 0; i < size[0]; i++) {\n      let row = [];\n      for (let j = 0; j < size[1]; j++) {\n        row.push({\n          card: {\n            x: 0,\n            y: 0,\n          },\n          mowed: false,\n        });\n      }\n      grid.push(row);\n    }\n    return grid;\n  }\n\n  // Update the size of the grid, checking if it's possible\n  function updateSizeArea(size) {\n    if (size[0] > 4 && size[1] > 4) {\n      if (size[0] <= 15 && size[1] <= 15) {\n        setGridSize(size);\n        setGrid(createGrid(size));\n      } else alert(\"La taille doit être inférieure à 16\");\n    } else alert(\"La taille doit être supérieure à 4\");\n  }\n\n  // Render the mower forms. If the mowing has started, all inputs fields are been removed\n  function DisplayMowerForms() {\n    return mowers.array.map((mower, key) => {\n      return (\n        <div className=\"divMowers\">\n          <Grid container>\n            <Grid item xs={2}>\n              <p className=\"numMower\">Tondeuse {key + 1}</p>\n            </Grid>\n            <Grid item xs>\n              <div class=\"form-group row sizeForm\">\n                <label for=\"example-number-input\" class=\"col-4 col-form-label\">\n                  Position X :\n                </label>\n\n                {started ? (\n                  <label class=\"col-4 col-form-label\">\n                    {mowers.array[key].startX}\n                  </label>\n                ) : (\n                  <div>\n                    <input\n                      class=\"form-control\"\n                      type=\"number\"\n                      value={mowers.array[key].startX}\n                      onChange={(e) =>\n                        updateStartMowerPosition(\n                          [e.target.value, mowers.array[key].startY],\n                          mowers.array[key].startOrientation,\n                          key,\n                          0\n                        )\n                      }\n                    />\n                  </div>\n                )}\n              </div>\n            </Grid>\n            <Grid item xs>\n              <div class=\"form-group row sizeForm\">\n                <label for=\"example-number-input\" class=\"col-4 col-form-label\">\n                  Position Y :\n                </label>\n\n                {started ? (\n                  <label class=\"col-4 col-form-label\">\n                    {mowers.array[key].startY}\n                  </label>\n                ) : (\n                  <div>\n                    <input\n                      class=\"form-control\"\n                      type=\"number\"\n                      value={mowers.array[key].startY}\n                      onChange={(e) =>\n                        updateStartMowerPosition(\n                          [mowers.array[key].startX, e.target.value],\n                          mowers.array[key].startOrientation,\n                          key,\n                          0\n                        )\n                      }\n                    />\n                  </div>\n                )}\n              </div>\n            </Grid>\n            <Grid item xs>\n              <div class=\"form-group row sizeForm\">\n                <label for=\"example-number-input\" class=\"col-4 col-form-label\">\n                  Orientation :\n                </label>\n\n                {started ? (\n                  <label class=\"col-4 col-form-label\">\n                    {mowers.array[key].startOrientation}\n                  </label>\n                ) : (\n                  <div>\n                    <select\n                      class=\"form-control\"\n                      value={mowers.array[key].startOrientation}\n                      onChange={(e) =>\n                        updateStartMowerPosition(\n                          [mowers.array[key].startX, mowers.array[key].startY],\n                          e.target.value,\n                          key,\n                          0\n                        )\n                      }\n                    >\n                      <option>Nord</option>\n                      <option>Sud</option>\n                      <option>Est</option>\n                      <option>Ouest</option>\n                    </select>\n                  </div>\n                )}\n              </div>\n            </Grid>\n          </Grid>\n          <div class=\"input-group mb-3\">\n            {started ? (\n              <label class=\"col-form-label\">Instructions :</label>\n            ) : (\n              <div class=\"input-group-append\">\n                <button\n                  class=\"btn btn-secondary\"\n                  type=\"button\"\n                  onClick={() => updatePathMower(\"D\", key, 1)}\n                >\n                  D\n                </button>\n                <button\n                  class=\"btn btn-secondary\"\n                  type=\"button\"\n                  onClick={() => updatePathMower(\"G\", key, 1)}\n                >\n                  G\n                </button>\n                <button\n                  class=\"btn btn-secondary\"\n                  type=\"button\"\n                  onClick={() => updatePathMower(\"A\", key, 1)}\n                >\n                  A\n                </button>\n              </div>\n            )}\n            {started ? (\n              <label class=\"col-4 col-form-label\">\n                {mowers.array[key].path}\n              </label>\n            ) : (\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                id=\"formGroupExampleInput\"\n                placeholder=\"Chaîne d'instructions\"\n                value={mowers.array[key].path}\n                onChange={(e) => updatePathMower(e.target.value, key)}\n              />\n            )}\n          </div>\n        </div>\n      );\n    });\n  }\n\n  // Render the mower form, including the DisplayMowerForms\n  function GetMowers() {\n    return (\n      <div className=\"formMowers\">\n        <p className=\"title\">Entrer les informations sur les tondeuses :</p>\n        <button\n          type=\"button\"\n          class=\"btn btn-primary\"\n          onClick={\n            started\n              ? () =>\n                  alert(\n                    \"Tu ne peux pas ajouter de tondeuses en cours de route !\"\n                  )\n              : () => addMower()\n          }\n        >\n          {started\n            ? \"Les tondeuses ne sont plus modifiables\"\n            : \"Ajouter une tondeuse\"}\n        </button>\n        <DisplayMowerForms />\n        <Grid container>\n          <Grid item>\n            <button\n              type=\"button\"\n              class=\"btn btn-primary\"\n              onClick={() => startMow()}\n            >\n              {currentMower === 0 && currentAction === 0 && !finished\n                ? \"Démarrer la tonte\"\n                : finished\n                ? \"La tonte est terminée\"\n                : \"Poursuivre la tonte\"}\n            </button>\n          </Grid>\n          <Grid item>\n            {started ? (\n              finished ? null : (\n                <p className=\"col-form-label textMowerCurrent\">\n                  La tondeuse {currentMower} est en train de tondre\n                </p>\n              )\n            ) : null}\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n\n  // Check if the position is correct (in mower forms)\n  function updateStartMowerPosition(pos, ori, key) {\n    let mow = mowers;\n    if (pos[0] >= 0 && pos[0] < gridSize[1])\n      mow.array[key].startX = parseInt(pos[0]);\n    else alert(\"La tondeuse n'est plus sur la pelouse !\");\n    if (pos[1] >= 0 && pos[1] < gridSize[0])\n      mow.array[key].startY = parseInt(pos[1]);\n    else alert(\"La tondeuse n'est plus sur la pelouse !\");\n    mow.array[key].startOrientation = ori;\n    setMowers(mow);\n    forceUpdate();\n  }\n\n  // Handle function of the input path form\n  function updatePathMower(char, key, mode) {\n    let letter = char.slice(-1);\n    if (letter === \"d\" || letter === \"D\") mowers.array[key].path.push(\"D\");\n    if (letter === \"g\" || letter === \"G\") mowers.array[key].path.push(\"G\");\n    if (letter === \"a\" || letter === \"A\") mowers.array[key].path.push(\"A\");\n    setMowers(mowers);\n    if (mode === 1) forceUpdate();\n  }\n\n    // Turn the mower, depending on initial orientation\n  function pivot(direction, mower) {\n    switch (mowers.array[mower].startOrientation) {\n      case \"Nord\":\n        if (direction === \"D\") {\n          mowers.array[mower].startOrientation = \"Est\";\n        }\n        if (direction === \"G\") {\n          mowers.array[mower].startOrientation = \"Ouest\";\n        }\n        break;\n      case \"Sud\":\n        if (direction === \"D\") {\n          mowers.array[mower].startOrientation = \"Ouest\";\n        }\n        if (direction === \"G\") {\n          mowers.array[mower].startOrientation = \"Est\";\n        }\n        break;\n      case \"Est\":\n        if (direction === \"D\") {\n          mowers.array[mower].startOrientation = \"Sud\";\n        }\n        if (direction === \"G\") {\n          mowers.array[mower].startOrientation = \"Nord\";\n        }\n        break;\n      case \"Ouest\":\n        if (direction === \"D\") {\n          mowers.array[mower].startOrientation = \"Nord\";\n        }\n        if (direction === \"G\") {\n          mowers.array[mower].startOrientation = \"Sud\";\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  // Forward the mower, depending on its orientation\n  function forward(mower) {\n    let orientation = mowers.array[mower].startOrientation;\n    if (orientation === \"Nord\") {\n      if (mowers.array[mower].startY < gridSize[1] - 1) {\n        mowers.array[mower].startY += 1;\n      } else console.log(\"Mouvement inutile\");\n    }\n    if (orientation === \"Sud\") {\n      if (mowers.array[mower].startY > 0) {\n        mowers.array[mower].startY -= 1;\n      } else console.log(\"Mouvement inutile\");\n    }\n    if (orientation === \"Est\") {\n      if (mowers.array[mower].startX < gridSize[0] - 1) {\n        mowers.array[mower].startX += 1;\n      } else console.log(\"Mouvement inutile\");\n    }\n    if (orientation === \"Ouest\") {\n      if (mowers.array[mower].startX > 0) {\n        mowers.array[mower].startX -= 1;\n      } else console.log(\"Mouvement inutile\");\n    }\n  }\n\n  // Add new mower. It will update the mowers form automatically\n  function addMower() {\n    mowers.array.push({\n      startX: 0,\n      startY: 0,\n      startOrientation: \"Nord\",\n      path: [],\n    });\n    forceUpdate();\n  }\n\n  // Start the process of mowing. It's a step by step process\n  function startMow() {\n    // Set the mower visible\n    mowerPos.visible = true;\n    // Get the coords\n    let [x, y] = [\n      mowers.array[currentMower].startX,\n      mowers.array[currentMower].startY,\n    ];\n    // Convert it to a inversed vertical axis array (following the subject)\n    y = gridSize[1] - 1 - y;\n    // Set the tile mowed\n    grid[y + 1][x].mowed = true;\n    // Update the position of the mowers's sprite\n    setMowerPosition(grid[y + 1][x].card.x, grid[y + 1][x].card.y);\n    // Force components to re-render\n    forceUpdate();\n\n    // Do actions, if mowing isn't finished\n    if (finished === false) {\n      console.log(currentMower, currentAction);\n      if (mowers.array.length > currentMower) {\n        if (mowers.array[currentMower].path.length > currentAction) {\n          nextOperation(currentMower, currentAction);\n          setCurrentAction(currentAction + 1);\n        } else {\n          if (mowers.array.length - 1 > currentMower) {\n            setCurrentMower(currentMower + 1);\n            setCurrentAction(0);\n          } else setFinished(true);\n        }\n      }\n    }\n  }\n\n  // Call the next operation of the current mower, thanks to the current action ID\n  function nextOperation(mower, id) {\n    const action = mowers.array[mower].path[id];\n    if (action === \"A\") forward(mower);\n    else {\n      pivot(action, mower);\n    }\n  }\n\n  // Set the position of the mower\n  function setMowerPosition(x, y) {\n    mowerPos.x = x;\n    mowerPos.y = y;\n  }\n\n  // Display rows of tiles\n  function DisplayRow(row, key) {\n    return (\n      <Grid container>\n        {row.map((cell, key2) => {\n          return (\n            <Grid item>\n              <Card\n                className={classes.cardStyle}\n                ref={(el) => {\n                  if (!el) return;\n                  // Update the absolutes coords of the tiles\n                  grid[key][key2].card.x =\n                    el.getBoundingClientRect().x + window.pageXOffset;\n                  grid[key][key2].card.y =\n                    el.getBoundingClientRect().y + window.pageYOffset;\n                }}\n              >\n                <CardMedia\n                  className={classes.cardMedia}\n                  // Following the state of the mowed, change the skin of the grass\n                  image={grid[key][key2].mowed ? grass2 : grass1}\n                />\n              </Card>\n            </Grid>\n          );\n        })}\n      </Grid>\n    );\n  }\n\n  // Display the lawn\n  function DisplayGrid() {\n    return (\n      <div className=\"lawn\">\n        {grid.map((row, key) => {\n          return DisplayRow(row, key);\n        })}\n      </div>\n    );\n  }\n\n  // Convert string orientation to integer degree\n  function orientationToDegree(ori) {\n    switch (ori) {\n      case \"Nord\":\n        return 0;\n      case \"Est\":\n        return 90;\n      case \"Sud\":\n        return 180;\n      case \"Ouest\":\n        return 270;\n      default:\n        return 0;\n    }\n  }\n\n  // Dispay the mower\n  function DisplayMower() {\n    const orientation = orientationToDegree(\n      mowers.array[currentMower].startOrientation\n    );\n    console.log(orientation);\n\n    return (\n      <div>\n        <img\n          src={mower}\n          alt=\"mower\"\n          style={{\n            position: \"absolute\",\n            width: 80,\n            height: 80,\n            left: `${mowerPos.x}px`,\n            top: `${mowerPos.y}px`,\n            opacity: mowerPos.visible === true ? 1 : 0,\n            transform: `rotate(${orientation}deg)`,\n          }}\n        />\n      </div>\n    );\n  }\n\n  // Render final texts with final positions\n  function EndMow() {\n    return (\n      <div className=\"endMow\">\n        <p className=\"title\">La tonte est terminée</p>\n        {mowers.array.map((mower, key) => {\n          return (\n            <p>\n              La tondeuse {key + 1} s'est arrêtée en {mower.startX},\n              {mower.startY}, orientée {mower.startOrientation}\n            </p>\n          );\n        })}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}