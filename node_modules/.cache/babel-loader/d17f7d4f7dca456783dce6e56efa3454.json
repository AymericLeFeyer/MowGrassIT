{"ast":null,"code":"var _jsxFileName = \"/home/aymeric/Git/MowGrassIT/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport { useState } from \"react\";\nimport { CardMedia, makeStyles, Card, Grid } from \"@material-ui/core\";\nimport { Animate } from \"react-move\";\nimport grass1 from \"./res/grass1.jpg\";\nimport grass2 from \"./res/grass2.jpg\";\nimport mower from \"./res/mower.png\";\nexport default function App() {\n  const [gridSize, setGridSize] = useState([5, 5]);\n  const [grid, setGrid] = useState(createGrid(gridSize));\n  const [mowerPos, setMowerPos] = useState({\n    x: 0,\n    y: 0,\n    visible: false\n  });\n  const useStyles = makeStyles({\n    cardStyle: {\n      maxWidth: 345,\n      boxShadow: \"1px 1px 2px black\"\n    },\n    cardMedia: {\n      height: 80,\n      width: 80\n    }\n  });\n  const classes = useStyles();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, \"MowGrass-IT\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    class: \"btn btn-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, \"R\\xE9cup\\xE9rer le sujet\"), /*#__PURE__*/React.createElement(GetGridSizeArea, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(DisplayGrid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(DisplayMower, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }));\n\n  function createGrid(size) {\n    let grid = [[]];\n\n    for (let i = 0; i < size[0]; i++) {\n      let row = [];\n\n      for (let j = 0; j < size[1]; j++) {\n        row.push({\n          card: {\n            x: 0,\n            y: 0\n          },\n          mowed: false\n        });\n      }\n\n      grid.push(row);\n    }\n\n    console.log(grid);\n    return grid;\n  }\n\n  function updateSizeArea(size) {\n    if (size[0] > 4 && size[1] > 4) {\n      if (size[0] <= 15 && size[1] <= 15) {\n        setGridSize(size);\n        setGrid(createGrid(size));\n      } else alert(\"La taille doit être inférieure à 16\");\n    } else alert(\"La taille doit être supérieure à 4\");\n  }\n\n  function setMowerPosition(x, y) {\n    console.log(grid);\n    let p = mowerPos;\n    p.x = x;\n    p.y = y;\n    setMowerPos(p);\n  }\n\n  function GetGridSizeArea() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"textSizeGrid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, \"Taille de la grille : \"), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"form-group row sizeForm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      for: \"example-number-input\",\n      class: \"col-2 col-form-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }\n    }, \"Hauteur :\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      class: \"form-control\",\n      type: \"number\",\n      value: gridSize[0],\n      onChange: e => updateSizeArea([e.target.value, gridSize[1]]),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"form-group row sizeForm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      for: \"example-number-input\",\n      class: \"col-2 col-form-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }\n    }, \"Largeur :\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      class: \"form-control\",\n      type: \"number\",\n      value: gridSize[1],\n      onChange: e => updateSizeArea([gridSize[0], e.target.value]),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n  function DisplayRow(row, key) {\n    return /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }\n    }, row.map((cell, key2) => {\n      return /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        className: classes.cardStyle,\n        ref: el => {\n          if (!el) return;\n          grid[key][key2].card.x = el.getBoundingClientRect().x;\n          grid[key][key2].card.y = el.getBoundingClientRect().y;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(CardMedia, {\n        className: classes.cardMedia,\n        image: grid[key][key2].mowed ? grass2 : grass1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 17\n        }\n      })));\n    }));\n  }\n\n  function DisplayGrid() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"lawn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 7\n      }\n    }, grid.map((row, key) => {\n      return DisplayRow(row, key);\n    }));\n  }\n\n  function DisplayMower() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: mower,\n      alt: \"mower\",\n      style: {\n        position: \"absolute\",\n        width: 80,\n        height: 80,\n        left: `${mowerPos.x}px`,\n        top: `${mowerPos.y}px`,\n        visible: `{mowerPos.visible ? visible : hidden}`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }\n    }));\n  }\n}","map":{"version":3,"sources":["/home/aymeric/Git/MowGrassIT/src/App.js"],"names":["React","useState","CardMedia","makeStyles","Card","Grid","Animate","grass1","grass2","mower","App","gridSize","setGridSize","grid","setGrid","createGrid","mowerPos","setMowerPos","x","y","visible","useStyles","cardStyle","maxWidth","boxShadow","cardMedia","height","width","classes","size","i","row","j","push","card","mowed","console","log","updateSizeArea","alert","setMowerPosition","p","GetGridSizeArea","e","target","value","DisplayRow","key","map","cell","key2","el","getBoundingClientRect","DisplayGrid","DisplayMower","position","left","top"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { useState } from \"react\";\nimport { CardMedia, makeStyles, Card, Grid } from \"@material-ui/core\";\nimport { Animate } from \"react-move\";\n\nimport grass1 from \"./res/grass1.jpg\";\nimport grass2 from \"./res/grass2.jpg\";\nimport mower from \"./res/mower.png\";\n\nexport default function App() {\n  const [gridSize, setGridSize] = useState([5, 5]);\n  const [grid, setGrid] = useState(createGrid(gridSize));\n  const [mowerPos, setMowerPos] = useState({\n    x: 0,\n    y: 0,\n    visible: false,\n  });\n\n  const useStyles = makeStyles({\n    cardStyle: {\n      maxWidth: 345,\n\n      boxShadow: \"1px 1px 2px black\",\n    },\n    cardMedia: {\n      height: 80,\n      width: 80,\n    },\n  });\n\n  const classes = useStyles();\n\n  return (\n    <div className=\"App\">\n      <h1>MowGrass-IT</h1>\n      <button type=\"button\" class=\"btn btn-primary\">\n        Récupérer le sujet\n      </button>\n\n      <GetGridSizeArea />\n      <DisplayGrid />\n      <DisplayMower />\n    </div>\n  );\n\n  function createGrid(size) {\n    let grid = [[]];\n    for (let i = 0; i < size[0]; i++) {\n      let row = [];\n      for (let j = 0; j < size[1]; j++) {\n        row.push({\n          card: {\n            x: 0,\n            y: 0,\n          },\n          mowed: false,\n        });\n      }\n      grid.push(row);\n    }\n\n    console.log(grid);\n    return grid;\n  }\n\n  function updateSizeArea(size) {\n    if (size[0] > 4 && size[1] > 4) {\n      if (size[0] <= 15 && size[1] <= 15) {\n        setGridSize(size);\n        setGrid(createGrid(size));\n      } else alert(\"La taille doit être inférieure à 16\");\n    } else alert(\"La taille doit être supérieure à 4\");\n  }\n\n  function setMowerPosition(x, y) {\n    console.log(grid);\n    let p = mowerPos;\n    p.x = x;\n    p.y = y;\n    setMowerPos(p);\n  }\n\n  function GetGridSizeArea() {\n    return (\n      <div>\n        <p className=\"textSizeGrid\">Taille de la grille : </p>\n        <div class=\"form-group row sizeForm\">\n          <label for=\"example-number-input\" class=\"col-2 col-form-label\">\n            Hauteur :\n          </label>\n          <div>\n            <input\n              class=\"form-control\"\n              type=\"number\"\n              value={gridSize[0]}\n              onChange={(e) => updateSizeArea([e.target.value, gridSize[1]])}\n            />\n          </div>\n        </div>\n        <div class=\"form-group row sizeForm\">\n          <label for=\"example-number-input\" class=\"col-2 col-form-label\">\n            Largeur :\n          </label>\n          <div>\n            <input\n              class=\"form-control\"\n              type=\"number\"\n              value={gridSize[1]}\n              onChange={(e) => updateSizeArea([gridSize[0], e.target.value])}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function DisplayRow(row, key) {\n    return (\n      <Grid container>\n        {row.map((cell, key2) => {\n          return (\n            <Grid item>\n              <Card\n                className={classes.cardStyle}\n                ref={(el) => {\n                  if (!el) return;\n                  grid[key][key2].card.x = el.getBoundingClientRect().x;\n                  grid[key][key2].card.y = el.getBoundingClientRect().y;\n                }}\n              >\n                <CardMedia\n                  className={classes.cardMedia}\n                  image={grid[key][key2].mowed ? grass2 : grass1}\n                />\n              </Card>\n            </Grid>\n          );\n        })}\n      </Grid>\n    );\n  }\n\n  function DisplayGrid() {\n    return (\n      <div className=\"lawn\">\n        {grid.map((row, key) => {\n          return DisplayRow(row, key);\n        })}\n      </div>\n    );\n  }\n\n  function DisplayMower() {\n    return (\n      <div>\n        <img\n          src={mower}\n          alt=\"mower\"\n          style={{\n            position: \"absolute\",\n            width: 80,\n            height: 80,\n            left: `${mowerPos.x}px`,\n            top: `${mowerPos.y}px`,\n            visible: `{mowerPos.visible ? visible : hidden}`\n          }}\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}