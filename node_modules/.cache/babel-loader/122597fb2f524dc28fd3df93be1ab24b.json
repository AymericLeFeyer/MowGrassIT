{"ast":null,"code":"var _jsxFileName = \"/home/aymeric/Git/MowGrassIT/src/App.js\";\n// Author : Aymeric LE FEYER\n// Date : 14/05/2020\n// Client: Progress-IT\nimport React from \"react\";\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport { CardMedia, makeStyles, Card, Grid } from \"@material-ui/core\";\nimport grass1 from \"./res/grass1.jpg\";\nimport grass2 from \"./res/grass2.jpg\";\nimport mower from \"./res/mower.png\";\nimport subject from \"./subject.pdf\";\nexport default function App() {\n  // Hooks\n  // Get the size of the grid\n  const [gridSize, setGridSize] = useState([5, 5]); // Get the grid (absolute positions of tiles and know if the tile is mowed)\n\n  const [grid, setGrid] = useState(createGrid(gridSize)); // Position of the current mower\n\n  const [mowerPos] = useState({\n    x: 0,\n    y: 0,\n    visible: false\n  }); // Array of all mowers, with informations\n\n  const [mowers, setMowers] = useState({\n    array: [{\n      startX: 0,\n      startY: 0,\n      startOrientation: \"Nord\",\n      path: []\n    }]\n  }); // Index of the current mower in the final mowing\n\n  const [currentMower, setCurrentMower] = useState(0); // Index of the current mower in the final mowing\n\n  const [currentAction, setCurrentAction] = useState(0); // Know if the mowing is finished or not\n\n  const [finished, setFinished] = useState(false); // Know if the mowing has started or not\n\n  const [started, setStarted] = useState(false); // Update the started hook\n\n  useEffect(() => {\n    setStarted(!(currentAction === 0 && currentMower === 0) || finished);\n  }, [started, currentAction, currentMower, finished]); // Style of the tiles\n\n  const useStyles = makeStyles({\n    cardStyle: {\n      maxWidth: 345,\n      boxShadow: \"1px 1px 2px black\"\n    },\n    cardMedia: {\n      height: 80,\n      width: 80\n    }\n  });\n  const classes = useStyles(); // Force the rendering of components\n\n  const [, updateState] = React.useState();\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n  return (\n    /*#__PURE__*/\n    // Root of the project\n    React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 35\n      }\n    }, /*#__PURE__*/React.createElement(DisplayTopInfos, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(GetGridSizeArea, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(GetMowers, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(DisplayGrid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(DisplayMower, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 37\n      }\n    }), finished ? /*#__PURE__*/React.createElement(EndMow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 49\n      }\n    }) : null)\n  ); // Display the title and the subject downloading button\n\n  function DisplayTopInfos() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 39\n      }\n    }, \"MowGrass-IT\"), /*#__PURE__*/React.createElement(\"a\", {\n      href: subject,\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 39\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      class: \"btn btn-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 41\n      }\n    }, \"R\\xE9cup\\xE9rer le sujet\")));\n  } // Display the grid size form\n\n\n  function GetGridSizeArea() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"textSizeGrid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 39\n      }\n    }, \"Taille de la grille :\", \" \"), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"form-group row sizeForm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 39\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      for: \"example-number-input\",\n      class: \"col-2 col-form-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 41\n      }\n    }, \"Hauteur :\"), started ? /*#__PURE__*/React.createElement(\"label\", {\n      class: \"col-form-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 43\n      }\n    }, gridSize[0]) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 43\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      class: \"form-control\",\n      type: \"number\",\n      value: gridSize[0],\n      onChange: e => updateSizeArea([e.target.value, gridSize[1]]),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 45\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"form-group row sizeForm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 39\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      for: \"example-number-input\",\n      class: \"col-2 col-form-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 41\n      }\n    }, \"Largeur :\"), started ? /*#__PURE__*/React.createElement(\"label\", {\n      class: \"col-form-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 43\n      }\n    }, gridSize[1]) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 43\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      class: \"form-control\",\n      type: \"number\",\n      value: gridSize[1],\n      onChange: e => updateSizeArea([gridSize[0], e.target.value]),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 45\n      }\n    }))));\n  } // Create the grid thanks to the grid size\n\n\n  function createGrid(size) {\n    let grid = [[]];\n\n    for (let i = 0; i < size[0]; i++) {\n      let row = [];\n\n      for (let j = 0; j < size[1]; j++) {\n        row.push({\n          card: {\n            x: 0,\n            y: 0\n          },\n          mowed: false\n        });\n      }\n\n      grid.push(row);\n    }\n\n    return grid;\n  } // Update the size of the grid, checking if it's possible\n\n\n  function updateSizeArea(size) {\n    if (size[0] > 4 && size[1] > 4) {\n      if (size[0] <= 15 && size[1] <= 15) {\n        setGridSize(size);\n        setGrid(createGrid(size));\n      } else alert(\"La taille doit être inférieure à 16\");\n    } else alert(\"La taille doit être supérieure à 4\");\n  } // Render the mower forms. If the mowing has started, all inputs fields are been removed\n\n\n  function DisplayMowerForms() {\n    return mowers.array.map((mower, key) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"divMowers\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 39\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 43\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: \"numMower\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 45\n        }\n      }, \"Tondeuse \", key + 1)), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 43\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"form-group row sizeForm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        for: \"example-number-input\",\n        class: \"col-4 col-form-label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 47\n        }\n      }, \"Position X :\"), started ? /*#__PURE__*/React.createElement(\"label\", {\n        class: \"col-4 col-form-label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 49\n        }\n      }, mowers.array[key].startX) : /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        class: \"form-control\",\n        type: \"number\",\n        value: mowers.array[key].startX,\n        onChange: e => updateStartMowerPosition([e.target.value, mowers.array[key].startY], mowers.array[key].startOrientation, key, 0),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 51\n        }\n      })))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 43\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"form-group row sizeForm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        for: \"example-number-input\",\n        class: \"col-4 col-form-label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 47\n        }\n      }, \"Position Y :\"), started ? /*#__PURE__*/React.createElement(\"label\", {\n        class: \"col-4 col-form-label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 49\n        }\n      }, mowers.array[key].startY) : /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        class: \"form-control\",\n        type: \"number\",\n        value: mowers.array[key].startY,\n        onChange: e => updateStartMowerPosition([mowers.array[key].startX, e.target.value], mowers.array[key].startOrientation, key, 0),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 51\n        }\n      })))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 43\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"form-group row sizeForm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        for: \"example-number-input\",\n        class: \"col-4 col-form-label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 47\n        }\n      }, \"Orientation :\"), started ? /*#__PURE__*/React.createElement(\"label\", {\n        class: \"col-4 col-form-label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 49\n        }\n      }, mowers.array[key].startOrientation) : /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(\"select\", {\n        class: \"form-control\",\n        value: mowers.array[key].startOrientation,\n        onChange: e => updateStartMowerPosition([mowers.array[key].startX, mowers.array[key].startY], e.target.value, key, 0),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 51\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 53\n        }\n      }, \"Nord\"), /*#__PURE__*/React.createElement(\"option\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 53\n        }\n      }, \"Sud\"), /*#__PURE__*/React.createElement(\"option\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 53\n        }\n      }, \"Est\"), /*#__PURE__*/React.createElement(\"option\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 53\n        }\n      }, \"Ouest\")))))), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 41\n        }\n      }, started ? /*#__PURE__*/React.createElement(\"label\", {\n        class: \"col-form-label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 45\n        }\n      }, \"Instructions :\") : /*#__PURE__*/React.createElement(\"div\", {\n        class: \"input-group-append\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        class: \"btn btn-secondary\",\n        type: \"button\",\n        onClick: () => updatePathMower(\"D\", key, 1),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 47\n        }\n      }, \"D\"), /*#__PURE__*/React.createElement(\"button\", {\n        class: \"btn btn-secondary\",\n        type: \"button\",\n        onClick: () => updatePathMower(\"G\", key, 1),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 47\n        }\n      }, \"G\"), /*#__PURE__*/React.createElement(\"button\", {\n        class: \"btn btn-secondary\",\n        type: \"button\",\n        onClick: () => updatePathMower(\"A\", key, 1),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 47\n        }\n      }, \"A\")), started ? /*#__PURE__*/React.createElement(\"label\", {\n        class: \"col-4 col-form-label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 45\n        }\n      }, mowers.array[key].path) : /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        class: \"form-control\",\n        id: \"formGroupExampleInput\",\n        placeholder: \"Cha\\xEEne d'instructions\",\n        value: mowers.array[key].path,\n        onChange: e => updatePathMower(e.target.value, key),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 45\n        }\n      })));\n    });\n  } // Render the mower form, including the DisplayMowerForms\n\n\n  function GetMowers() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"formMowers\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 39\n      }\n    }, \"Entrer les informations sur les tondeuses :\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      class: \"btn btn-primary\",\n      onClick: started ? () => alert(\"Tu ne peux pas ajouter de tondeuses en cours de route !\") : () => addMower(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 39\n      }\n    }, started ? \"Les tondeuses ne sont plus modifiables\" : \"Ajouter une tondeuse\"), /*#__PURE__*/React.createElement(DisplayMowerForms, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 39\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 39\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      class: \"btn btn-primary\",\n      onClick: () => startMow(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 43\n      }\n    }, currentMower === 0 && currentAction === 0 && !finished ? \"Démarrer la tonte\" : finished ? \"La tonte est terminée\" : \"Poursuivre la tonte\")), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 41\n      }\n    }, started ? finished ? null : /*#__PURE__*/React.createElement(\"p\", {\n      className: \"col-form-label textMowerCurrent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 47\n      }\n    }, \"La tondeuse \", currentMower, \" est en train de tondre\") : null)));\n  } // Check if the position is correct (in mower forms)\n\n\n  function updateStartMowerPosition(pos, ori, key) {\n    let mow = mowers;\n    if (pos[0] >= 0 && pos[0] < gridSize[1]) mow.array[key].startX = parseInt(pos[0]);else alert(\"La tondeuse n'est plus sur la pelouse !\");\n    if (pos[1] >= 0 && pos[1] < gridSize[0]) mow.array[key].startY = parseInt(pos[1]);else alert(\"La tondeuse n'est plus sur la pelouse !\");\n    mow.array[key].startOrientation = ori;\n    setMowers(mow);\n    forceUpdate();\n  } // Handle function of the input path form\n\n\n  function updatePathMower(char, key, mode) {\n    let letter = char.slice(-1);\n    if (letter === \"d\" || letter === \"D\") mowers.array[key].path.push(\"D\");\n    if (letter === \"g\" || letter === \"G\") mowers.array[key].path.push(\"G\");\n    if (letter === \"a\" || letter === \"A\") mowers.array[key].path.push(\"A\");\n    setMowers(mowers);\n    if (mode === 1) forceUpdate();\n  } // Turn the mower, depending on initial orientation\n\n\n  function pivot(direction, mower) {\n    switch (mowers.array[mower].startOrientation) {\n      case \"Nord\":\n        if (direction === \"D\") {\n          mowers.array[mower].startOrientation = \"Est\";\n        }\n\n        if (direction === \"G\") {\n          mowers.array[mower].startOrientation = \"Ouest\";\n        }\n\n        break;\n\n      case \"Sud\":\n        if (direction === \"D\") {\n          mowers.array[mower].startOrientation = \"Ouest\";\n        }\n\n        if (direction === \"G\") {\n          mowers.array[mower].startOrientation = \"Est\";\n        }\n\n        break;\n\n      case \"Est\":\n        if (direction === \"D\") {\n          mowers.array[mower].startOrientation = \"Sud\";\n        }\n\n        if (direction === \"G\") {\n          mowers.array[mower].startOrientation = \"Nord\";\n        }\n\n        break;\n\n      case \"Ouest\":\n        if (direction === \"D\") {\n          mowers.array[mower].startOrientation = \"Nord\";\n        }\n\n        if (direction === \"G\") {\n          mowers.array[mower].startOrientation = \"Sud\";\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  } // Forward the mower, depending on its orientation\n\n\n  function forward(mower) {\n    let orientation = mowers.array[mower].startOrientation;\n\n    if (orientation === \"Nord\") {\n      if (mowers.array[mower].startY < gridSize[1] - 1) {\n        mowers.array[mower].startY += 1;\n      } else console.log(\"Mouvement inutile\");\n    }\n\n    if (orientation === \"Sud\") {\n      if (mowers.array[mower].startY > 0) {\n        mowers.array[mower].startY -= 1;\n      } else console.log(\"Mouvement inutile\");\n    }\n\n    if (orientation === \"Est\") {\n      if (mowers.array[mower].startX < gridSize[0] - 1) {\n        mowers.array[mower].startX += 1;\n      } else console.log(\"Mouvement inutile\");\n    }\n\n    if (orientation === \"Ouest\") {\n      if (mowers.array[mower].startX > 0) {\n        mowers.array[mower].startX -= 1;\n      } else console.log(\"Mouvement inutile\");\n    }\n  } // Add new mower. It will update the mowers form automatically\n\n\n  function addMower() {\n    mowers.array.push({\n      startX: 0,\n      startY: 0,\n      startOrientation: \"Nord\",\n      path: []\n    });\n    forceUpdate();\n  } // Start the process of mowing. It's a step by step process\n\n\n  function startMow() {\n    // Set the mower visible\n    mowerPos.visible = true; // Get the coords\n\n    let [x, y] = [mowers.array[currentMower].startX, mowers.array[currentMower].startY]; // Convert it to a inversed vertical axis array (following the subject)\n\n    y = gridSize[1] - 1 - y; // Set the tile mowed\n\n    grid[y + 1][x].mowed = true; // Update the position of the mowers's sprite\n\n    setMowerPosition(grid[y + 1][x].card.x, grid[y + 1][x].card.y); // Force components to re-render\n\n    forceUpdate(); // Do actions, if mowing isn't finished\n\n    if (finished === false) {\n      console.log(currentMower, currentAction);\n\n      if (mowers.array.length > currentMower) {\n        if (mowers.array[currentMower].path.length > currentAction) {\n          nextOperation(currentMower, currentAction);\n          setCurrentAction(currentAction + 1);\n        } else {\n          if (mowers.array.length - 1 > currentMower) {\n            setCurrentMower(currentMower + 1);\n            setCurrentAction(0);\n          } else setFinished(true);\n        }\n      }\n    }\n  } // Call the next operation of the current mower, thanks to the current action ID\n\n\n  function nextOperation(mower, id) {\n    const action = mowers.array[mower].path[id];\n    if (action === \"A\") forward(mower);else {\n      pivot(action, mower);\n    }\n  } // Set the position of the mower\n\n\n  function setMowerPosition(x, y) {\n    mowerPos.x = x;\n    mowerPos.y = y;\n  } // Display rows of tiles\n\n\n  function DisplayRow(row, key) {\n    return /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 673,\n        columnNumber: 37\n      }\n    }, row.map((cell, key2) => {\n      return /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 676,\n          columnNumber: 43\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        className: classes.cardStyle,\n        ref: el => {\n          if (!el) return; // Update the absolutes coords of the tiles\n\n          grid[key][key2].card.x = el.getBoundingClientRect().x + window.pageXOffset;\n          grid[key][key2].card.y = el.getBoundingClientRect().y + window.pageYOffset;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 677,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(CardMedia, {\n        className: classes.cardMedia // Following the state of the mowed, change the skin of the grass\n        ,\n        image: grid[key][key2].mowed ? grass2 : grass1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 690,\n          columnNumber: 47\n        }\n      })));\n    }));\n  } // Display the lawn\n\n\n  function DisplayGrid() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"lawn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 710,\n        columnNumber: 37\n      }\n    }, grid.map((row, key) => {\n      return DisplayRow(row, key);\n    }));\n  } // Convert string orientation to integer degree\n\n\n  function orientationToDegree(ori) {\n    switch (ori) {\n      case \"Nord\":\n        return 0;\n\n      case \"Est\":\n        return 90;\n\n      case \"Sud\":\n        return 180;\n\n      case \"Ouest\":\n        return 270;\n\n      default:\n        return 0;\n    }\n  } // Dispay the mower\n\n\n  function DisplayMower() {\n    const orientation = orientationToDegree(mowers.array[currentMower].startOrientation);\n    console.log(orientation);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 742,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: mower,\n      alt: \"mower\",\n      style: {\n        position: \"absolute\",\n        width: 80,\n        height: 80,\n        left: `${mowerPos.x}px`,\n        top: `${mowerPos.y}px`,\n        opacity: mowerPos.visible === true ? 1 : 0,\n        transform: `rotate(${orientation}deg)`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 743,\n        columnNumber: 39\n      }\n    }));\n  } // Render final texts with final positions\n\n\n  function EndMow() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"endMow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 764,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 765,\n        columnNumber: 39\n      }\n    }, \"La tonte est termin\\xE9e\"), mowers.array.map((mower, key) => {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 770,\n          columnNumber: 43\n        }\n      }, \"La tondeuse \", key + 1, \" s'est arr\\xEAt\\xE9e en \", mower.startX, \",\", mower.startY, \", orient\\xE9e \", mower.startOrientation);\n    }));\n  }\n}","map":{"version":3,"sources":["/home/aymeric/Git/MowGrassIT/src/App.js"],"names":["React","useState","useEffect","CardMedia","makeStyles","Card","Grid","grass1","grass2","mower","subject","App","gridSize","setGridSize","grid","setGrid","createGrid","mowerPos","x","y","visible","mowers","setMowers","array","startX","startY","startOrientation","path","currentMower","setCurrentMower","currentAction","setCurrentAction","finished","setFinished","started","setStarted","useStyles","cardStyle","maxWidth","boxShadow","cardMedia","height","width","classes","updateState","forceUpdate","useCallback","DisplayTopInfos","GetGridSizeArea","e","updateSizeArea","target","value","size","i","row","j","push","card","mowed","alert","DisplayMowerForms","map","key","updateStartMowerPosition","updatePathMower","GetMowers","addMower","startMow","pos","ori","mow","parseInt","char","mode","letter","slice","pivot","direction","forward","orientation","console","log","setMowerPosition","length","nextOperation","id","action","DisplayRow","cell","key2","el","getBoundingClientRect","window","pageXOffset","pageYOffset","DisplayGrid","orientationToDegree","DisplayMower","position","left","top","opacity","transform","EndMow"],"mappings":"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","sourcesContent":["// Author : Aymeric LE FEYER\n// Date : 14/05/2020\n// Client: Progress-IT\n\nimport React from \"react\";\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport { CardMedia, makeStyles, Card, Grid } from \"@material-ui/core\";\n\nimport grass1 from \"./res/grass1.jpg\";\nimport grass2 from \"./res/grass2.jpg\";\nimport mower from \"./res/mower.png\";\nimport subject from \"./subject.pdf\";\n\nexport default function App() {\n                                // Hooks\n                                // Get the size of the grid\n                                const [gridSize, setGridSize] = useState([\n                                  5,\n                                  5,\n                                ]);\n                                // Get the grid (absolute positions of tiles and know if the tile is mowed)\n                                const [grid, setGrid] = useState(\n                                  createGrid(gridSize)\n                                );\n                                // Position of the current mower\n                                const [mowerPos] = useState({\n                                  x: 0,\n                                  y: 0,\n                                  visible: false,\n                                });\n                                // Array of all mowers, with informations\n                                const [mowers, setMowers] = useState({\n                                  array: [\n                                    {\n                                      startX: 0,\n                                      startY: 0,\n                                      startOrientation: \"Nord\",\n                                      path: [],\n                                    },\n                                  ],\n                                });\n                                // Index of the current mower in the final mowing\n                                const [\n                                  currentMower,\n                                  setCurrentMower,\n                                ] = useState(0);\n                                // Index of the current mower in the final mowing\n                                const [\n                                  currentAction,\n                                  setCurrentAction,\n                                ] = useState(0);\n                                // Know if the mowing is finished or not\n                                const [finished, setFinished] = useState(false);\n                                // Know if the mowing has started or not\n                                const [started, setStarted] = useState(false);\n                                // Update the started hook\n                                useEffect(() => {\n                                  setStarted(\n                                    !(\n                                      currentAction === 0 && currentMower === 0\n                                    ) || finished\n                                  );\n                                }, [\n                                  started,\n                                  currentAction,\n                                  currentMower,\n                                  finished,\n                                ]);\n\n                                // Style of the tiles\n                                const useStyles = makeStyles({\n                                  cardStyle: {\n                                    maxWidth: 345,\n\n                                    boxShadow: \"1px 1px 2px black\",\n                                  },\n                                  cardMedia: {\n                                    height: 80,\n                                    width: 80,\n                                  },\n                                });\n\n                                const classes = useStyles();\n\n                                // Force the rendering of components\n                                const [, updateState] = React.useState();\n                                const forceUpdate = React.useCallback(\n                                  () => updateState({}),\n                                  []\n                                );\n\n                                return (\n                                  // Root of the project\n                                  <div className=\"App\">\n                                    <DisplayTopInfos />\n                                    <GetGridSizeArea />\n                                    <GetMowers />\n                                    <DisplayGrid />\n                                    <DisplayMower />\n                                    {finished ? <EndMow /> : null}\n                                  </div>\n                                );\n\n                                // Display the title and the subject downloading button\n                                function DisplayTopInfos() {\n                                  return (\n                                    <div>\n                                      <h1>MowGrass-IT</h1>\n                                      <a\n                                        href={subject}\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                      >\n                                        <button\n                                          type=\"button\"\n                                          class=\"btn btn-primary\"\n                                        >\n                                          Récupérer le sujet\n                                        </button>\n                                      </a>\n                                    </div>\n                                  );\n                                }\n\n                                // Display the grid size form\n                                function GetGridSizeArea() {\n                                  return (\n                                    <div>\n                                      <p className=\"textSizeGrid\">\n                                        Taille de la grille :{\" \"}\n                                      </p>\n                                      <div class=\"form-group row sizeForm\">\n                                        <label\n                                          for=\"example-number-input\"\n                                          class=\"col-2 col-form-label\"\n                                        >\n                                          Hauteur :\n                                        </label>\n                                        {started ? (\n                                          <label class=\"col-form-label\">\n                                            {gridSize[0]}\n                                          </label>\n                                        ) : (\n                                          <div>\n                                            <input\n                                              class=\"form-control\"\n                                              type=\"number\"\n                                              value={gridSize[0]}\n                                              onChange={(e) =>\n                                                updateSizeArea([\n                                                  e.target.value,\n                                                  gridSize[1],\n                                                ])\n                                              }\n                                            />\n                                          </div>\n                                        )}\n                                      </div>\n                                      <div class=\"form-group row sizeForm\">\n                                        <label\n                                          for=\"example-number-input\"\n                                          class=\"col-2 col-form-label\"\n                                        >\n                                          Largeur :\n                                        </label>\n                                        {started ? (\n                                          <label class=\"col-form-label\">\n                                            {gridSize[1]}\n                                          </label>\n                                        ) : (\n                                          <div>\n                                            <input\n                                              class=\"form-control\"\n                                              type=\"number\"\n                                              value={gridSize[1]}\n                                              onChange={(e) =>\n                                                updateSizeArea([\n                                                  gridSize[0],\n                                                  e.target.value,\n                                                ])\n                                              }\n                                            />\n                                          </div>\n                                        )}\n                                      </div>\n                                    </div>\n                                  );\n                                }\n\n                                // Create the grid thanks to the grid size\n                                function createGrid(size) {\n                                  let grid = [[]];\n                                  for (let i = 0; i < size[0]; i++) {\n                                    let row = [];\n                                    for (let j = 0; j < size[1]; j++) {\n                                      row.push({\n                                        card: {\n                                          x: 0,\n                                          y: 0,\n                                        },\n                                        mowed: false,\n                                      });\n                                    }\n                                    grid.push(row);\n                                  }\n                                  return grid;\n                                }\n\n                                // Update the size of the grid, checking if it's possible\n                                function updateSizeArea(size) {\n                                  if (size[0] > 4 && size[1] > 4) {\n                                    if (size[0] <= 15 && size[1] <= 15) {\n                                      setGridSize(size);\n                                      setGrid(createGrid(size));\n                                    } else\n                                      alert(\n                                        \"La taille doit être inférieure à 16\"\n                                      );\n                                  } else\n                                    alert(\"La taille doit être supérieure à 4\");\n                                }\n\n                                // Render the mower forms. If the mowing has started, all inputs fields are been removed\n                                function DisplayMowerForms() {\n                                  return mowers.array.map((mower, key) => {\n                                    return (\n                                      <div className=\"divMowers\">\n                                        <Grid container>\n                                          <Grid item xs={2}>\n                                            <p className=\"numMower\">\n                                              Tondeuse {key + 1}\n                                            </p>\n                                          </Grid>\n                                          <Grid item xs>\n                                            <div class=\"form-group row sizeForm\">\n                                              <label\n                                                for=\"example-number-input\"\n                                                class=\"col-4 col-form-label\"\n                                              >\n                                                Position X :\n                                              </label>\n\n                                              {started ? (\n                                                <label class=\"col-4 col-form-label\">\n                                                  {mowers.array[key].startX}\n                                                </label>\n                                              ) : (\n                                                <div>\n                                                  <input\n                                                    class=\"form-control\"\n                                                    type=\"number\"\n                                                    value={\n                                                      mowers.array[key].startX\n                                                    }\n                                                    onChange={(e) =>\n                                                      updateStartMowerPosition(\n                                                        [\n                                                          e.target.value,\n                                                          mowers.array[key]\n                                                            .startY,\n                                                        ],\n                                                        mowers.array[key]\n                                                          .startOrientation,\n                                                        key,\n                                                        0\n                                                      )\n                                                    }\n                                                  />\n                                                </div>\n                                              )}\n                                            </div>\n                                          </Grid>\n                                          <Grid item xs>\n                                            <div class=\"form-group row sizeForm\">\n                                              <label\n                                                for=\"example-number-input\"\n                                                class=\"col-4 col-form-label\"\n                                              >\n                                                Position Y :\n                                              </label>\n\n                                              {started ? (\n                                                <label class=\"col-4 col-form-label\">\n                                                  {mowers.array[key].startY}\n                                                </label>\n                                              ) : (\n                                                <div>\n                                                  <input\n                                                    class=\"form-control\"\n                                                    type=\"number\"\n                                                    value={\n                                                      mowers.array[key].startY\n                                                    }\n                                                    onChange={(e) =>\n                                                      updateStartMowerPosition(\n                                                        [\n                                                          mowers.array[key]\n                                                            .startX,\n                                                          e.target.value,\n                                                        ],\n                                                        mowers.array[key]\n                                                          .startOrientation,\n                                                        key,\n                                                        0\n                                                      )\n                                                    }\n                                                  />\n                                                </div>\n                                              )}\n                                            </div>\n                                          </Grid>\n                                          <Grid item xs>\n                                            <div class=\"form-group row sizeForm\">\n                                              <label\n                                                for=\"example-number-input\"\n                                                class=\"col-4 col-form-label\"\n                                              >\n                                                Orientation :\n                                              </label>\n\n                                              {started ? (\n                                                <label class=\"col-4 col-form-label\">\n                                                  {\n                                                    mowers.array[key]\n                                                      .startOrientation\n                                                  }\n                                                </label>\n                                              ) : (\n                                                <div>\n                                                  <select\n                                                    class=\"form-control\"\n                                                    value={\n                                                      mowers.array[key]\n                                                        .startOrientation\n                                                    }\n                                                    onChange={(e) =>\n                                                      updateStartMowerPosition(\n                                                        [\n                                                          mowers.array[key]\n                                                            .startX,\n                                                          mowers.array[key]\n                                                            .startY,\n                                                        ],\n                                                        e.target.value,\n                                                        key,\n                                                        0\n                                                      )\n                                                    }\n                                                  >\n                                                    <option>Nord</option>\n                                                    <option>Sud</option>\n                                                    <option>Est</option>\n                                                    <option>Ouest</option>\n                                                  </select>\n                                                </div>\n                                              )}\n                                            </div>\n                                          </Grid>\n                                        </Grid>\n                                        <div class=\"input-group mb-3\">\n                                          {started ? (\n                                            <label class=\"col-form-label\">\n                                              Instructions :\n                                            </label>\n                                          ) : (\n                                            <div class=\"input-group-append\">\n                                              <button\n                                                class=\"btn btn-secondary\"\n                                                type=\"button\"\n                                                onClick={() =>\n                                                  updatePathMower(\"D\", key, 1)\n                                                }\n                                              >\n                                                D\n                                              </button>\n                                              <button\n                                                class=\"btn btn-secondary\"\n                                                type=\"button\"\n                                                onClick={() =>\n                                                  updatePathMower(\"G\", key, 1)\n                                                }\n                                              >\n                                                G\n                                              </button>\n                                              <button\n                                                class=\"btn btn-secondary\"\n                                                type=\"button\"\n                                                onClick={() =>\n                                                  updatePathMower(\"A\", key, 1)\n                                                }\n                                              >\n                                                A\n                                              </button>\n                                            </div>\n                                          )}\n                                          {started ? (\n                                            <label class=\"col-4 col-form-label\">\n                                              {mowers.array[key].path}\n                                            </label>\n                                          ) : (\n                                            <input\n                                              type=\"text\"\n                                              class=\"form-control\"\n                                              id=\"formGroupExampleInput\"\n                                              placeholder=\"Chaîne d'instructions\"\n                                              value={mowers.array[key].path}\n                                              onChange={(e) =>\n                                                updatePathMower(\n                                                  e.target.value,\n                                                  key\n                                                )\n                                              }\n                                            />\n                                          )}\n                                        </div>\n                                      </div>\n                                    );\n                                  });\n                                }\n\n                                // Render the mower form, including the DisplayMowerForms\n                                function GetMowers() {\n                                  return (\n                                    <div className=\"formMowers\">\n                                      <p className=\"title\">\n                                        Entrer les informations sur les\n                                        tondeuses :\n                                      </p>\n                                      <button\n                                        type=\"button\"\n                                        class=\"btn btn-primary\"\n                                        onClick={\n                                          started\n                                            ? () =>\n                                                alert(\n                                                  \"Tu ne peux pas ajouter de tondeuses en cours de route !\"\n                                                )\n                                            : () => addMower()\n                                        }\n                                      >\n                                        {started\n                                          ? \"Les tondeuses ne sont plus modifiables\"\n                                          : \"Ajouter une tondeuse\"}\n                                      </button>\n                                      <DisplayMowerForms />\n                                      <Grid container>\n                                        <Grid item>\n                                          <button\n                                            type=\"button\"\n                                            class=\"btn btn-primary\"\n                                            onClick={() => startMow()}\n                                          >\n                                            {currentMower === 0 &&\n                                            currentAction === 0 &&\n                                            !finished\n                                              ? \"Démarrer la tonte\"\n                                              : finished\n                                              ? \"La tonte est terminée\"\n                                              : \"Poursuivre la tonte\"}\n                                          </button>\n                                        </Grid>\n                                        <Grid item>\n                                          {started ? (\n                                            finished ? null : (\n                                              <p className=\"col-form-label textMowerCurrent\">\n                                                La tondeuse {currentMower} est\n                                                en train de tondre\n                                              </p>\n                                            )\n                                          ) : null}\n                                        </Grid>\n                                      </Grid>\n                                    </div>\n                                  );\n                                }\n\n                                // Check if the position is correct (in mower forms)\n                                function updateStartMowerPosition(\n                                  pos,\n                                  ori,\n                                  key\n                                ) {\n                                  let mow = mowers;\n                                  if (pos[0] >= 0 && pos[0] < gridSize[1])\n                                    mow.array[key].startX = parseInt(pos[0]);\n                                  else\n                                    alert(\n                                      \"La tondeuse n'est plus sur la pelouse !\"\n                                    );\n                                  if (pos[1] >= 0 && pos[1] < gridSize[0])\n                                    mow.array[key].startY = parseInt(pos[1]);\n                                  else\n                                    alert(\n                                      \"La tondeuse n'est plus sur la pelouse !\"\n                                    );\n                                  mow.array[key].startOrientation = ori;\n                                  setMowers(mow);\n                                  forceUpdate();\n                                }\n\n                                // Handle function of the input path form\n                                function updatePathMower(char, key, mode) {\n                                  let letter = char.slice(-1);\n                                  if (letter === \"d\" || letter === \"D\")\n                                    mowers.array[key].path.push(\"D\");\n                                  if (letter === \"g\" || letter === \"G\")\n                                    mowers.array[key].path.push(\"G\");\n                                  if (letter === \"a\" || letter === \"A\")\n                                    mowers.array[key].path.push(\"A\");\n                                  setMowers(mowers);\n                                  if (mode === 1) forceUpdate();\n                                }\n\n                                // Turn the mower, depending on initial orientation\n                                function pivot(direction, mower) {\n                                  switch (\n                                    mowers.array[mower].startOrientation\n                                  ) {\n                                    case \"Nord\":\n                                      if (direction === \"D\") {\n                                        mowers.array[mower].startOrientation =\n                                          \"Est\";\n                                      }\n                                      if (direction === \"G\") {\n                                        mowers.array[mower].startOrientation =\n                                          \"Ouest\";\n                                      }\n                                      break;\n                                    case \"Sud\":\n                                      if (direction === \"D\") {\n                                        mowers.array[mower].startOrientation =\n                                          \"Ouest\";\n                                      }\n                                      if (direction === \"G\") {\n                                        mowers.array[mower].startOrientation =\n                                          \"Est\";\n                                      }\n                                      break;\n                                    case \"Est\":\n                                      if (direction === \"D\") {\n                                        mowers.array[mower].startOrientation =\n                                          \"Sud\";\n                                      }\n                                      if (direction === \"G\") {\n                                        mowers.array[mower].startOrientation =\n                                          \"Nord\";\n                                      }\n                                      break;\n                                    case \"Ouest\":\n                                      if (direction === \"D\") {\n                                        mowers.array[mower].startOrientation =\n                                          \"Nord\";\n                                      }\n                                      if (direction === \"G\") {\n                                        mowers.array[mower].startOrientation =\n                                          \"Sud\";\n                                      }\n                                      break;\n                                    default:\n                                      break;\n                                  }\n                                }\n\n                                // Forward the mower, depending on its orientation\n                                function forward(mower) {\n                                  let orientation =\n                                    mowers.array[mower].startOrientation;\n                                  if (orientation === \"Nord\") {\n                                    if (\n                                      mowers.array[mower].startY <\n                                      gridSize[1] - 1\n                                    ) {\n                                      mowers.array[mower].startY += 1;\n                                    } else console.log(\"Mouvement inutile\");\n                                  }\n                                  if (orientation === \"Sud\") {\n                                    if (mowers.array[mower].startY > 0) {\n                                      mowers.array[mower].startY -= 1;\n                                    } else console.log(\"Mouvement inutile\");\n                                  }\n                                  if (orientation === \"Est\") {\n                                    if (\n                                      mowers.array[mower].startX <\n                                      gridSize[0] - 1\n                                    ) {\n                                      mowers.array[mower].startX += 1;\n                                    } else console.log(\"Mouvement inutile\");\n                                  }\n                                  if (orientation === \"Ouest\") {\n                                    if (mowers.array[mower].startX > 0) {\n                                      mowers.array[mower].startX -= 1;\n                                    } else console.log(\"Mouvement inutile\");\n                                  }\n                                }\n\n                                // Add new mower. It will update the mowers form automatically\n                                function addMower() {\n                                  mowers.array.push({\n                                    startX: 0,\n                                    startY: 0,\n                                    startOrientation: \"Nord\",\n                                    path: [],\n                                  });\n                                  forceUpdate();\n                                }\n\n                                // Start the process of mowing. It's a step by step process\n                                function startMow() {\n                                  // Set the mower visible\n                                  mowerPos.visible = true;\n                                  // Get the coords\n                                  let [x, y] = [\n                                    mowers.array[currentMower].startX,\n                                    mowers.array[currentMower].startY,\n                                  ];\n                                  // Convert it to a inversed vertical axis array (following the subject)\n                                  y = gridSize[1] - 1 - y;\n                                  // Set the tile mowed\n                                  grid[y + 1][x].mowed = true;\n                                  // Update the position of the mowers's sprite\n                                  setMowerPosition(\n                                    grid[y + 1][x].card.x,\n                                    grid[y + 1][x].card.y\n                                  );\n                                  // Force components to re-render\n                                  forceUpdate();\n\n                                  // Do actions, if mowing isn't finished\n                                  if (finished === false) {\n                                    console.log(currentMower, currentAction);\n                                    if (mowers.array.length > currentMower) {\n                                      if (\n                                        mowers.array[currentMower].path.length >\n                                        currentAction\n                                      ) {\n                                        nextOperation(\n                                          currentMower,\n                                          currentAction\n                                        );\n                                        setCurrentAction(currentAction + 1);\n                                      } else {\n                                        if (\n                                          mowers.array.length - 1 >\n                                          currentMower\n                                        ) {\n                                          setCurrentMower(currentMower + 1);\n                                          setCurrentAction(0);\n                                        } else setFinished(true);\n                                      }\n                                    }\n                                  }\n                                }\n\n                                // Call the next operation of the current mower, thanks to the current action ID\n                                function nextOperation(mower, id) {\n                                  const action = mowers.array[mower].path[id];\n                                  if (action === \"A\") forward(mower);\n                                  else {\n                                    pivot(action, mower);\n                                  }\n                                }\n\n                                // Set the position of the mower\n                                function setMowerPosition(x, y) {\n                                  mowerPos.x = x;\n                                  mowerPos.y = y;\n                                }\n\n                                // Display rows of tiles\n                                function DisplayRow(row, key) {\n                                  return (\n                                    <Grid container>\n                                      {row.map((cell, key2) => {\n                                        return (\n                                          <Grid item>\n                                            <Card\n                                              className={classes.cardStyle}\n                                              ref={(el) => {\n                                                if (!el) return;\n                                                // Update the absolutes coords of the tiles\n                                                grid[key][key2].card.x =\n                                                  el.getBoundingClientRect().x +\n                                                  window.pageXOffset;\n                                                grid[key][key2].card.y =\n                                                  el.getBoundingClientRect().y +\n                                                  window.pageYOffset;\n                                              }}\n                                            >\n                                              <CardMedia\n                                                className={classes.cardMedia}\n                                                // Following the state of the mowed, change the skin of the grass\n                                                image={\n                                                  grid[key][key2].mowed\n                                                    ? grass2\n                                                    : grass1\n                                                }\n                                              />\n                                            </Card>\n                                          </Grid>\n                                        );\n                                      })}\n                                    </Grid>\n                                  );\n                                }\n\n                                // Display the lawn\n                                function DisplayGrid() {\n                                  return (\n                                    <div className=\"lawn\">\n                                      {grid.map((row, key) => {\n                                        return DisplayRow(row, key);\n                                      })}\n                                    </div>\n                                  );\n                                }\n\n                                // Convert string orientation to integer degree\n                                function orientationToDegree(ori) {\n                                  switch (ori) {\n                                    case \"Nord\":\n                                      return 0;\n                                    case \"Est\":\n                                      return 90;\n                                    case \"Sud\":\n                                      return 180;\n                                    case \"Ouest\":\n                                      return 270;\n                                    default:\n                                      return 0;\n                                  }\n                                }\n\n                                // Dispay the mower\n                                function DisplayMower() {\n                                  const orientation = orientationToDegree(\n                                    mowers.array[currentMower].startOrientation\n                                  );\n                                  console.log(orientation);\n\n                                  return (\n                                    <div>\n                                      <img\n                                        src={mower}\n                                        alt=\"mower\"\n                                        style={{\n                                          position: \"absolute\",\n                                          width: 80,\n                                          height: 80,\n                                          left: `${mowerPos.x}px`,\n                                          top: `${mowerPos.y}px`,\n                                          opacity:\n                                            mowerPos.visible === true ? 1 : 0,\n                                          transform: `rotate(${orientation}deg)`,\n                                        }}\n                                      />\n                                    </div>\n                                  );\n                                }\n\n                                // Render final texts with final positions\n                                function EndMow() {\n                                  return (\n                                    <div className=\"endMow\">\n                                      <p className=\"title\">\n                                        La tonte est terminée\n                                      </p>\n                                      {mowers.array.map((mower, key) => {\n                                        return (\n                                          <p>\n                                            La tondeuse {key + 1} s'est arrêtée\n                                            en {mower.startX},{mower.startY},\n                                            orientée {mower.startOrientation}\n                                          </p>\n                                        );\n                                      })}\n                                    </div>\n                                  );\n                                }\n                              }\n"]},"metadata":{},"sourceType":"module"}