{"ast":null,"code":"var _jsxFileName = \"/home/aymeric/Git/MowGrassIT/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport { useState } from \"react\";\nimport { CardMedia, makeStyles, Card, Grid } from \"@material-ui/core\";\nimport { Animate } from \"react-move\";\nimport grass1 from \"./res/grass1.jpg\";\nimport grass2 from \"./res/grass2.jpg\";\nimport mower from \"./res/mower.png\";\nexport default function App() {\n  const [gridSize, setGridSize] = useState([5, 5]);\n  const [grid, setGrid] = useState(createGrid(gridSize));\n  const [mowerPos, setMowerPos] = useState({\n    x: 0,\n    y: 0,\n    visible: false\n  });\n  const [mowers, setMowers] = useState({\n    array: [{\n      startX: 0,\n      startY: 0,\n      startOrientation: \"Nord\",\n      path: []\n    }]\n  });\n  const useStyles = makeStyles({\n    cardStyle: {\n      maxWidth: 345,\n      boxShadow: \"1px 1px 2px black\"\n    },\n    cardMedia: {\n      height: 80,\n      width: 80\n    }\n  });\n  const classes = useStyles();\n  const [, updateState] = React.useState();\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, \"MowGrass-IT\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    class: \"btn btn-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, \"R\\xE9cup\\xE9rer le sujet\"), /*#__PURE__*/React.createElement(GetGridSizeArea, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(GetMowers, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(DisplayGrid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(DisplayMower, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }));\n\n  function createGrid(size) {\n    let grid = [[]];\n\n    for (let i = 0; i < size[0]; i++) {\n      let row = [];\n\n      for (let j = 0; j < size[1]; j++) {\n        row.push({\n          card: {\n            x: 0,\n            y: 0\n          },\n          mowed: false\n        });\n      }\n\n      grid.push(row);\n    }\n\n    return grid;\n  }\n\n  function updateSizeArea(size) {\n    if (size[0] > 4 && size[1] > 4) {\n      if (size[0] <= 15 && size[1] <= 15) {\n        setGridSize(size);\n        setGrid(createGrid(size));\n      } else alert(\"La taille doit être inférieure à 16\");\n    } else alert(\"La taille doit être supérieure à 4\");\n  }\n\n  function setMowerPosition(x, y) {\n    let p = mowerPos;\n    p.x = x;\n    p.y = y;\n    setMowerPos(p);\n  }\n\n  function GetGridSizeArea() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"textSizeGrid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }\n    }, \"Taille de la grille : \"), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"form-group row sizeForm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      for: \"example-number-input\",\n      class: \"col-2 col-form-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }\n    }, \"Hauteur :\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      class: \"form-control\",\n      type: \"number\",\n      value: gridSize[0],\n      onChange: e => updateSizeArea([e.target.value, gridSize[1]]),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"form-group row sizeForm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      for: \"example-number-input\",\n      class: \"col-2 col-form-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }\n    }, \"Largeur :\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      class: \"form-control\",\n      type: \"number\",\n      value: gridSize[1],\n      onChange: e => updateSizeArea([gridSize[0], e.target.value]),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n  function DisplayRow(row, key) {\n    return /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 7\n      }\n    }, row.map((cell, key2) => {\n      return /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        className: classes.cardStyle,\n        ref: el => {\n          if (!el) return;\n          grid[key][key2].card.x = el.getBoundingClientRect().x + window.pageXOffset;\n          grid[key][key2].card.y = el.getBoundingClientRect().y + window.pageYOffset;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(CardMedia, {\n        className: classes.cardMedia,\n        image: grid[key][key2].mowed ? grass2 : grass1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 17\n        }\n      })));\n    }));\n  }\n\n  function DisplayGrid() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"lawn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 7\n      }\n    }, grid.map((row, key) => {\n      return DisplayRow(row, key);\n    }));\n  }\n\n  function orientationToDegree(ori) {\n    switch (ori) {\n      case \"Nord\":\n        return 0;\n\n      case \"Est\":\n        return 90;\n\n      case \"Sud\":\n        return 180;\n\n      case \"Ouest\":\n        return 270;\n\n      default:\n        return 0;\n    }\n  }\n\n  function DisplayMower() {\n    const orientation = orientationToDegree(mowers.array[0].startOrientation);\n    console.log(orientation);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: mower,\n      alt: \"mower\",\n      style: {\n        position: \"absolute\",\n        width: 80,\n        height: 80,\n        left: `${mowerPos.x}px`,\n        top: `${mowerPos.y}px`,\n        opacity: mowerPos.visible === true ? 1 : 0,\n        transform: `rotate(${orientation}deg)`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  function addMower() {\n    let mow = mowers;\n    mow.array.push({\n      startX: 0,\n      startY: 0,\n      startOrientation: \"Nord\",\n      path: []\n    });\n    setMowers(mow);\n    forceUpdate();\n  } // https://zeit.co/blog/async-and-await\n\n\n  function sleep(time) {\n    return new Promise(resolve => setTimeout(resolve, time));\n  }\n\n  function startMow() {\n    mowerPos.visible = true;\n    executePaths();\n  }\n\n  function nextOperation(mower, id) {}\n\n  function executePaths() {\n    for (let i = 0; i < mowers.array.length; i++) {\n      mowers.array[i].path.map(action => {\n        if (action === \"A\") forward(i);else {\n          pivot(action, i);\n        }\n        let [x, y] = [mowers.array[i].startX, mowers.array[i].startY];\n        y = gridSize[1] - 1 - y;\n        setMowerPosition(grid[y + 1][x].card.x, grid[y + 1][x].card.y);\n        forceUpdate();\n        return 1;\n      });\n    }\n  }\n\n  function pivot(direction, mower) {\n    switch (mowers.array[mower].startOrientation) {\n      case \"Nord\":\n        if (direction === \"D\") {\n          mowers.array[mower].startOrientation = \"Est\";\n        }\n\n        if (direction === \"G\") {\n          mowers.array[mower].startOrientation = \"Ouest\";\n        }\n\n        break;\n\n      case \"Sud\":\n        if (direction === \"D\") {\n          mowers.array[mower].startOrientation = \"Ouest\";\n        }\n\n        if (direction === \"G\") {\n          mowers.array[mower].startOrientation = \"Est\";\n        }\n\n        break;\n\n      case \"Est\":\n        if (direction === \"D\") {\n          mowers.array[mower].startOrientation = \"Sud\";\n        }\n\n        if (direction === \"G\") {\n          mowers.array[mower].startOrientation = \"Nord\";\n        }\n\n        break;\n\n      case \"Ouest\":\n        if (direction === \"D\") {\n          mowers.array[mower].startOrientation = \"Nord\";\n        }\n\n        if (direction === \"G\") {\n          mowers.array[mower].startOrientation = \"Sud\";\n        }\n\n        break;\n\n      default:\n        break;\n    }\n\n    setMowers(mowers);\n    forceUpdate();\n  }\n\n  function forward(mower) {\n    let orientation = mowers.array[mower].startOrientation;\n\n    if (orientation === \"Nord\") {\n      if (mowers.array[mower].startY < gridSize[1] - 1) {\n        mowers.array[mower].startY += 1;\n      } else console.log(\"Mouvement inutile\");\n    }\n\n    if (orientation === \"Sud\") {\n      if (mowers.array[mower].startY > 0) {\n        mowers.array[mower].startY -= 1;\n      } else console.log(\"Mouvement inutile\");\n    }\n\n    if (orientation === \"Est\") {\n      if (mowers.array[mower].startX < gridSize[0] - 1) {\n        mowers.array[mower].startX += 1;\n      } else console.log(\"Mouvement inutile\");\n    }\n\n    if (orientation === \"Ouest\") {\n      if (mowers.array[mower].startX > 0) {\n        mowers.array[mower].startX -= 1;\n      } else console.log(\"Mouvement inutile\");\n    }\n\n    forceUpdate();\n  }\n\n  function updateStartMowerPosition(pos, ori, key) {\n    let mow = mowers;\n    if (pos[0] >= 0 && pos[0] < gridSize[1]) mow.array[key].startX = parseInt(pos[0]);else alert(\"La tondeuse n'est plus sur la pelouse !\");\n    if (pos[1] >= 0 && pos[1] < gridSize[0]) mow.array[key].startY = parseInt(pos[1]);else alert(\"La tondeuse n'est plus sur la pelouse !\");\n    mow.array[key].startOrientation = ori;\n    setMowers(mow);\n    forceUpdate();\n  }\n\n  function updatePathMower(char, key, mode) {\n    let letter = char.slice(-1);\n    if (letter === \"d\" || letter === \"D\") mowers.array[key].path.push(\"D\");\n    if (letter === \"g\" || letter === \"G\") mowers.array[key].path.push(\"G\");\n    if (letter === \"a\" || letter === \"A\") mowers.array[key].path.push(\"A\");\n    setMowers(mowers);\n    if (mode === 1) forceUpdate();\n  }\n\n  function DisplayMowerForms() {\n    return mowers.array.map((mower, key) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"divMowers\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: \"numMower\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 15\n        }\n      }, \"Tondeuse \", key + 1)), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"form-group row sizeForm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        for: \"example-number-input\",\n        class: \"col-4 col-form-label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 17\n        }\n      }, \"Position X :\"), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        class: \"form-control\",\n        type: \"number\",\n        value: mowers.array[key].startX,\n        onChange: e => updateStartMowerPosition([e.target.value, mowers.array[key].startY], mowers.array[key].startOrientation, key, 0),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 19\n        }\n      })))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"form-group row sizeForm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        for: \"example-number-input\",\n        class: \"col-4 col-form-label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 17\n        }\n      }, \"Position Y :\"), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        class: \"form-control\",\n        type: \"number\",\n        value: mowers.array[key].startY,\n        onChange: e => updateStartMowerPosition([mowers.array[key].startX, e.target.value], mowers.array[key].startOrientation, key, 0),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 19\n        }\n      })))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"form-group row sizeForm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        for: \"example-number-input\",\n        class: \"col-4 col-form-label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 17\n        }\n      }, \"Orientation :\"), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"select\", {\n        class: \"form-control\",\n        value: mowers.array[key].startOrientation,\n        onChange: e => updateStartMowerPosition([mowers.array[key].startX, mowers.array[key].startY], e.target.value, key, 0),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 21\n        }\n      }, \"Nord\"), /*#__PURE__*/React.createElement(\"option\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 21\n        }\n      }, \"Sud\"), /*#__PURE__*/React.createElement(\"option\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 21\n        }\n      }, \"Est\"), /*#__PURE__*/React.createElement(\"option\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 21\n        }\n      }, \"Ouest\")))))), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"input-group-append\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        class: \"btn btn-secondary\",\n        type: \"button\",\n        onClick: () => updatePathMower(\"D\", key, 1),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 15\n        }\n      }, \"D\"), /*#__PURE__*/React.createElement(\"button\", {\n        class: \"btn btn-secondary\",\n        type: \"button\",\n        onClick: () => updatePathMower(\"G\", key, 1),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 15\n        }\n      }, \"G\"), /*#__PURE__*/React.createElement(\"button\", {\n        class: \"btn btn-secondary\",\n        type: \"button\",\n        onClick: () => updatePathMower(\"A\", key, 1),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 15\n        }\n      }, \"A\")), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        class: \"form-control\",\n        id: \"formGroupExampleInput\",\n        placeholder: \"Cha\\xEEne d'instructions\",\n        value: mowers.array[key].path,\n        onChange: e => updatePathMower(e.target.value, key),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 13\n        }\n      })));\n    });\n  }\n\n  function GetMowers() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"formMowers\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 9\n      }\n    }, \"Entrer les informations sur les tondeuses :\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      class: \"btn btn-primary\",\n      onClick: () => addMower(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 9\n      }\n    }, \"Ajouter une tondeuse\"), /*#__PURE__*/React.createElement(DisplayMowerForms, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      class: \"btn btn-primary\",\n      onClick: () => startMow(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 9\n      }\n    }, \"D\\xE9marrer la tonte\"));\n  }\n}","map":{"version":3,"sources":["/home/aymeric/Git/MowGrassIT/src/App.js"],"names":["React","useState","CardMedia","makeStyles","Card","Grid","Animate","grass1","grass2","mower","App","gridSize","setGridSize","grid","setGrid","createGrid","mowerPos","setMowerPos","x","y","visible","mowers","setMowers","array","startX","startY","startOrientation","path","useStyles","cardStyle","maxWidth","boxShadow","cardMedia","height","width","classes","updateState","forceUpdate","useCallback","size","i","row","j","push","card","mowed","updateSizeArea","alert","setMowerPosition","p","GetGridSizeArea","e","target","value","DisplayRow","key","map","cell","key2","el","getBoundingClientRect","window","pageXOffset","pageYOffset","DisplayGrid","orientationToDegree","ori","DisplayMower","orientation","console","log","position","left","top","opacity","transform","addMower","mow","sleep","time","Promise","resolve","setTimeout","startMow","executePaths","nextOperation","id","length","action","forward","pivot","direction","updateStartMowerPosition","pos","parseInt","updatePathMower","char","mode","letter","slice","DisplayMowerForms","GetMowers"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { useState } from \"react\";\nimport { CardMedia, makeStyles, Card, Grid } from \"@material-ui/core\";\nimport { Animate } from \"react-move\";\n\nimport grass1 from \"./res/grass1.jpg\";\nimport grass2 from \"./res/grass2.jpg\";\nimport mower from \"./res/mower.png\";\n\nexport default function App() {\n  const [gridSize, setGridSize] = useState([5, 5]);\n  const [grid, setGrid] = useState(createGrid(gridSize));\n  const [mowerPos, setMowerPos] = useState({\n    x: 0,\n    y: 0,\n    visible: false,\n  });\n  const [mowers, setMowers] = useState({\n    array: [\n      {\n        startX: 0,\n        startY: 0,\n        startOrientation: \"Nord\",\n        path: [],\n      },\n    ],\n  });\n\n  const useStyles = makeStyles({\n    cardStyle: {\n      maxWidth: 345,\n\n      boxShadow: \"1px 1px 2px black\",\n    },\n    cardMedia: {\n      height: 80,\n      width: 80,\n    },\n  });\n\n  const classes = useStyles();\n\n  const [, updateState] = React.useState();\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n\n  return (\n    <div className=\"App\">\n      <h1>MowGrass-IT</h1>\n      <button type=\"button\" class=\"btn btn-primary\">\n        Récupérer le sujet\n      </button>\n\n      <GetGridSizeArea />\n      <GetMowers />\n      <DisplayGrid />\n      <DisplayMower />\n    </div>\n  );\n\n  function createGrid(size) {\n    let grid = [[]];\n    for (let i = 0; i < size[0]; i++) {\n      let row = [];\n      for (let j = 0; j < size[1]; j++) {\n        row.push({\n          card: {\n            x: 0,\n            y: 0,\n          },\n          mowed: false,\n        });\n      }\n      grid.push(row);\n    }\n    return grid;\n  }\n\n  function updateSizeArea(size) {\n    if (size[0] > 4 && size[1] > 4) {\n      if (size[0] <= 15 && size[1] <= 15) {\n        setGridSize(size);\n        setGrid(createGrid(size));\n      } else alert(\"La taille doit être inférieure à 16\");\n    } else alert(\"La taille doit être supérieure à 4\");\n  }\n\n  function setMowerPosition(x, y) {\n    let p = mowerPos;\n    p.x = x;\n    p.y = y;\n    setMowerPos(p);\n  }\n\n  function GetGridSizeArea() {\n    return (\n      <div>\n        <p className=\"textSizeGrid\">Taille de la grille : </p>\n        <div class=\"form-group row sizeForm\">\n          <label for=\"example-number-input\" class=\"col-2 col-form-label\">\n            Hauteur :\n          </label>\n          <div>\n            <input\n              class=\"form-control\"\n              type=\"number\"\n              value={gridSize[0]}\n              onChange={(e) => updateSizeArea([e.target.value, gridSize[1]])}\n            />\n          </div>\n        </div>\n        <div class=\"form-group row sizeForm\">\n          <label for=\"example-number-input\" class=\"col-2 col-form-label\">\n            Largeur :\n          </label>\n          <div>\n            <input\n              class=\"form-control\"\n              type=\"number\"\n              value={gridSize[1]}\n              onChange={(e) => updateSizeArea([gridSize[0], e.target.value])}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function DisplayRow(row, key) {\n    return (\n      <Grid container>\n        {row.map((cell, key2) => {\n          return (\n            <Grid item>\n              <Card\n                className={classes.cardStyle}\n                ref={(el) => {\n                  if (!el) return;\n\n                  grid[key][key2].card.x =\n                    el.getBoundingClientRect().x + window.pageXOffset;\n                  grid[key][key2].card.y =\n                    el.getBoundingClientRect().y + window.pageYOffset;\n                }}\n              >\n                <CardMedia\n                  className={classes.cardMedia}\n                  image={grid[key][key2].mowed ? grass2 : grass1}\n                />\n              </Card>\n            </Grid>\n          );\n        })}\n      </Grid>\n    );\n  }\n\n  function DisplayGrid() {\n    return (\n      <div className=\"lawn\">\n        {grid.map((row, key) => {\n          return DisplayRow(row, key);\n        })}\n      </div>\n    );\n  }\n\n  function orientationToDegree(ori) {\n    switch (ori) {\n      case \"Nord\":\n        return 0;\n      case \"Est\":\n        return 90;\n      case \"Sud\":\n        return 180;\n      case \"Ouest\":\n        return 270;\n      default:\n        return 0;\n    }\n  }\n\n  function DisplayMower() {\n    const orientation = orientationToDegree(mowers.array[0].startOrientation);\n    console.log(orientation);\n\n    return (\n      <div>\n        <img\n          src={mower}\n          alt=\"mower\"\n          style={{\n            position: \"absolute\",\n            width: 80,\n            height: 80,\n            left: `${mowerPos.x}px`,\n            top: `${mowerPos.y}px`,\n            opacity: mowerPos.visible === true ? 1 : 0,\n            transform: `rotate(${orientation}deg)`,\n          }}\n        />\n      </div>\n    );\n  }\n\n  function addMower() {\n    let mow = mowers;\n    mow.array.push({\n      startX: 0,\n      startY: 0,\n      startOrientation: \"Nord\",\n      path: [],\n    });\n    setMowers(mow);\n    forceUpdate();\n  }\n\n  // https://zeit.co/blog/async-and-await\n  function sleep(time) {\n    return new Promise((resolve) => setTimeout(resolve, time));\n  }\n\n  function startMow() {\n    mowerPos.visible = true;\n\n    executePaths();\n  }\n\n  function nextOperation(mower, id) {\n    \n  }\n\n  function executePaths() {\n    for (let i = 0; i < mowers.array.length; i++) {\n      mowers.array[i].path.map((action) => {\n        if (action === \"A\") forward(i);\n        else {\n          pivot(action, i);\n        }\n        let [x, y] = [mowers.array[i].startX, mowers.array[i].startY];\n\n        y = gridSize[1] - 1 - y;\n\n        setMowerPosition(grid[y + 1][x].card.x, grid[y + 1][x].card.y);\n\n        forceUpdate();\n\n        return 1;\n      });\n    }\n  }\n\n  function pivot(direction, mower) {\n    switch (mowers.array[mower].startOrientation) {\n      case \"Nord\":\n        if (direction === \"D\") {\n          mowers.array[mower].startOrientation = \"Est\";\n        }\n        if (direction === \"G\") {\n          mowers.array[mower].startOrientation = \"Ouest\";\n        }\n        break;\n      case \"Sud\":\n        if (direction === \"D\") {\n          mowers.array[mower].startOrientation = \"Ouest\";\n        }\n        if (direction === \"G\") {\n          mowers.array[mower].startOrientation = \"Est\";\n        }\n        break;\n      case \"Est\":\n        if (direction === \"D\") {\n          mowers.array[mower].startOrientation = \"Sud\";\n        }\n        if (direction === \"G\") {\n          mowers.array[mower].startOrientation = \"Nord\";\n        }\n        break;\n      case \"Ouest\":\n        if (direction === \"D\") {\n          mowers.array[mower].startOrientation = \"Nord\";\n        }\n        if (direction === \"G\") {\n          mowers.array[mower].startOrientation = \"Sud\";\n        }\n        break;\n      default:\n        break;\n    }\n    setMowers(mowers);\n    forceUpdate();\n  }\n\n  function forward(mower) {\n    let orientation = mowers.array[mower].startOrientation;\n    if (orientation === \"Nord\") {\n      if (mowers.array[mower].startY < gridSize[1] - 1) {\n        mowers.array[mower].startY += 1;\n      } else console.log(\"Mouvement inutile\");\n    }\n    if (orientation === \"Sud\") {\n      if (mowers.array[mower].startY > 0) {\n        mowers.array[mower].startY -= 1;\n      } else console.log(\"Mouvement inutile\");\n    }\n    if (orientation === \"Est\") {\n      if (mowers.array[mower].startX < gridSize[0] - 1) {\n        mowers.array[mower].startX += 1;\n      } else console.log(\"Mouvement inutile\");\n    }\n    if (orientation === \"Ouest\") {\n      if (mowers.array[mower].startX > 0) {\n        mowers.array[mower].startX -= 1;\n      } else console.log(\"Mouvement inutile\");\n    }\n    forceUpdate();\n  }\n\n  function updateStartMowerPosition(pos, ori, key) {\n    let mow = mowers;\n    if (pos[0] >= 0 && pos[0] < gridSize[1])\n      mow.array[key].startX = parseInt(pos[0]);\n    else alert(\"La tondeuse n'est plus sur la pelouse !\");\n    if (pos[1] >= 0 && pos[1] < gridSize[0])\n      mow.array[key].startY = parseInt(pos[1]);\n    else alert(\"La tondeuse n'est plus sur la pelouse !\");\n    mow.array[key].startOrientation = ori;\n    setMowers(mow);\n    forceUpdate();\n  }\n\n  function updatePathMower(char, key, mode) {\n    let letter = char.slice(-1);\n    if (letter === \"d\" || letter === \"D\") mowers.array[key].path.push(\"D\");\n    if (letter === \"g\" || letter === \"G\") mowers.array[key].path.push(\"G\");\n    if (letter === \"a\" || letter === \"A\") mowers.array[key].path.push(\"A\");\n    setMowers(mowers);\n    if (mode === 1) forceUpdate();\n  }\n\n  function DisplayMowerForms() {\n    return mowers.array.map((mower, key) => {\n      return (\n        <div className=\"divMowers\">\n          <Grid container>\n            <Grid item xs={2}>\n              <p className=\"numMower\">Tondeuse {key + 1}</p>\n            </Grid>\n            <Grid item xs>\n              <div class=\"form-group row sizeForm\">\n                <label for=\"example-number-input\" class=\"col-4 col-form-label\">\n                  Position X :\n                </label>\n                <div>\n                  <input\n                    class=\"form-control\"\n                    type=\"number\"\n                    value={mowers.array[key].startX}\n                    onChange={(e) =>\n                      updateStartMowerPosition(\n                        [e.target.value, mowers.array[key].startY],\n                        mowers.array[key].startOrientation,\n                        key,\n                        0\n                      )\n                    }\n                  />\n                </div>\n              </div>\n            </Grid>\n            <Grid item xs>\n              <div class=\"form-group row sizeForm\">\n                <label for=\"example-number-input\" class=\"col-4 col-form-label\">\n                  Position Y :\n                </label>\n                <div>\n                  <input\n                    class=\"form-control\"\n                    type=\"number\"\n                    value={mowers.array[key].startY}\n                    onChange={(e) =>\n                      updateStartMowerPosition(\n                        [mowers.array[key].startX, e.target.value],\n                        mowers.array[key].startOrientation,\n                        key,\n                        0\n                      )\n                    }\n                  />\n                </div>\n              </div>\n            </Grid>\n            <Grid item xs>\n              <div class=\"form-group row sizeForm\">\n                <label for=\"example-number-input\" class=\"col-4 col-form-label\">\n                  Orientation :\n                </label>\n                <div>\n                  <select\n                    class=\"form-control\"\n                    value={mowers.array[key].startOrientation}\n                    onChange={(e) =>\n                      updateStartMowerPosition(\n                        [mowers.array[key].startX, mowers.array[key].startY],\n                        e.target.value,\n                        key,\n                        0\n                      )\n                    }\n                  >\n                    <option>Nord</option>\n                    <option>Sud</option>\n                    <option>Est</option>\n                    <option>Ouest</option>\n                  </select>\n                </div>\n              </div>\n            </Grid>\n          </Grid>\n          <div class=\"input-group mb-3\">\n            <div class=\"input-group-append\">\n              <button\n                class=\"btn btn-secondary\"\n                type=\"button\"\n                onClick={() => updatePathMower(\"D\", key, 1)}\n              >\n                D\n              </button>\n              <button\n                class=\"btn btn-secondary\"\n                type=\"button\"\n                onClick={() => updatePathMower(\"G\", key, 1)}\n              >\n                G\n              </button>\n              <button\n                class=\"btn btn-secondary\"\n                type=\"button\"\n                onClick={() => updatePathMower(\"A\", key, 1)}\n              >\n                A\n              </button>\n            </div>\n            <input\n              type=\"text\"\n              class=\"form-control\"\n              id=\"formGroupExampleInput\"\n              placeholder=\"Chaîne d'instructions\"\n              value={mowers.array[key].path}\n              onChange={(e) => updatePathMower(e.target.value, key)}\n            />\n          </div>\n        </div>\n      );\n    });\n  }\n\n  function GetMowers() {\n    return (\n      <div className=\"formMowers\">\n        <p className=\"title\">Entrer les informations sur les tondeuses :</p>\n        <button\n          type=\"button\"\n          class=\"btn btn-primary\"\n          onClick={() => addMower()}\n        >\n          Ajouter une tondeuse\n        </button>\n\n        <DisplayMowerForms />\n\n        <button\n          type=\"button\"\n          class=\"btn btn-primary\"\n          onClick={() => startMow()}\n        >\n          Démarrer la tonte\n        </button>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}