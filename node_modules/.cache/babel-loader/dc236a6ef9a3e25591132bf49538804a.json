{"ast":null,"code":"var _jsxFileName = \"/home/aymeric/Git/MowGrassIT/src/App.js\";\n// Author : Aymeric LE FEYER\n// Date : 14/05/2020\n// Client: Progress-IT\nimport React from \"react\";\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport { CardMedia, makeStyles, Card, Grid } from \"@material-ui/core\";\nimport grass1 from \"./res/grass1.jpg\";\nimport grass2 from \"./res/grass2.jpg\";\nimport mower from \"./res/mower.png\";\nexport default function App() {\n  // Hooks\n  // Get the size of the grid\n  const [gridSize, setGridSize] = useState([5, 5]); // Get the grid (absolute positions of tiles and know if the tile is mowed)\n\n  const [grid, setGrid] = useState(createGrid(gridSize)); // Position of the current mower\n\n  const [mowerPos, setMowerPos] = useState({\n    x: 0,\n    y: 0,\n    visible: false\n  }); // Array of all mowers, with informations\n\n  const [mowers, setMowers] = useState({\n    array: [{\n      startX: 0,\n      startY: 0,\n      startOrientation: \"Nord\",\n      path: []\n    }]\n  }); // Index of the current mower in the final mowing\n\n  const [currentMower, setCurrentMower] = useState(0); // Index of the current mower in the final mowing\n\n  const [currentAction, setCurrentAction] = useState(0); // Know if the mowing is finished or not\n\n  const [finished, setFinished] = useState(false); // Know if the mowing has started or not\n\n  const [started, setStarted] = useState(false); // Update the started hook\n\n  useEffect(() => {\n    setStarted(!(currentAction === 0 && currentMower === 0) || finished);\n  }, [started, currentAction, currentMower, finished]); // Style of the tiles\n\n  const useStyles = makeStyles({\n    cardStyle: {\n      maxWidth: 345,\n      boxShadow: \"1px 1px 2px black\"\n    },\n    cardMedia: {\n      height: 80,\n      width: 80\n    }\n  });\n  const classes = useStyles(); // Force the rendering of components\n\n  const [, updateState] = React.useState();\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, \"MowGrass-IT\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    class: \"btn btn-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, \"R\\xE9cup\\xE9rer le sujet\"), /*#__PURE__*/React.createElement(GetGridSizeArea, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(GetMowers, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(DisplayGrid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(DisplayMower, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }), finished ? /*#__PURE__*/React.createElement(EndMow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 19\n    }\n  }) : null);\n\n  function createGrid(size) {\n    let grid = [[]];\n\n    for (let i = 0; i < size[0]; i++) {\n      let row = [];\n\n      for (let j = 0; j < size[1]; j++) {\n        row.push({\n          card: {\n            x: 0,\n            y: 0\n          },\n          mowed: false\n        });\n      }\n\n      grid.push(row);\n    }\n\n    return grid;\n  }\n\n  function updateSizeArea(size) {\n    if (size[0] > 4 && size[1] > 4) {\n      if (size[0] <= 15 && size[1] <= 15) {\n        setGridSize(size);\n        setGrid(createGrid(size));\n      } else alert(\"La taille doit être inférieure à 16\");\n    } else alert(\"La taille doit être supérieure à 4\");\n  }\n\n  function setMowerPosition(x, y) {\n    let p = mowerPos;\n    p.x = x;\n    p.y = y;\n    setMowerPos(p);\n  }\n\n  function GetGridSizeArea() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"textSizeGrid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }\n    }, \"Taille de la grille : \"), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"form-group row sizeForm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      for: \"example-number-input\",\n      class: \"col-2 col-form-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }\n    }, \"Hauteur :\"), started ? /*#__PURE__*/React.createElement(\"label\", {\n      class: \"col-form-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }\n    }, gridSize[0]) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      class: \"form-control\",\n      type: \"number\",\n      value: gridSize[0],\n      onChange: e => updateSizeArea([e.target.value, gridSize[1]]),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"form-group row sizeForm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      for: \"example-number-input\",\n      class: \"col-2 col-form-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }\n    }, \"Largeur :\"), started ? /*#__PURE__*/React.createElement(\"label\", {\n      class: \"col-form-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }\n    }, gridSize[1]) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      class: \"form-control\",\n      type: \"number\",\n      value: gridSize[1],\n      onChange: e => updateSizeArea([gridSize[0], e.target.value]),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 15\n      }\n    }))));\n  }\n\n  function DisplayRow(row, key) {\n    return /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 7\n      }\n    }, row.map((cell, key2) => {\n      return /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        className: classes.cardStyle,\n        ref: el => {\n          if (!el) return;\n          grid[key][key2].card.x = el.getBoundingClientRect().x + window.pageXOffset;\n          grid[key][key2].card.y = el.getBoundingClientRect().y + window.pageYOffset;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(CardMedia, {\n        className: classes.cardMedia,\n        image: grid[key][key2].mowed ? grass2 : grass1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 17\n        }\n      })));\n    }));\n  }\n\n  function DisplayGrid() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"lawn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 7\n      }\n    }, grid.map((row, key) => {\n      return DisplayRow(row, key);\n    }));\n  }\n\n  function orientationToDegree(ori) {\n    switch (ori) {\n      case \"Nord\":\n        return 0;\n\n      case \"Est\":\n        return 90;\n\n      case \"Sud\":\n        return 180;\n\n      case \"Ouest\":\n        return 270;\n\n      default:\n        return 0;\n    }\n  }\n\n  function DisplayMower() {\n    const orientation = orientationToDegree(mowers.array[currentMower].startOrientation);\n    console.log(orientation);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: mower,\n      alt: \"mower\",\n      style: {\n        position: \"absolute\",\n        width: 80,\n        height: 80,\n        left: `${mowerPos.x}px`,\n        top: `${mowerPos.y}px`,\n        opacity: mowerPos.visible === true ? 1 : 0,\n        transform: `rotate(${orientation}deg)`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  function addMower() {\n    let mow = mowers;\n    mow.array.push({\n      startX: 0,\n      startY: 0,\n      startOrientation: \"Nord\",\n      path: []\n    });\n    setMowers(mow);\n    forceUpdate();\n  }\n\n  function startMow() {\n    console.log(\"operation : \" + mowers.array[currentMower].path[currentAction]);\n    mowerPos.visible = true;\n    let [x, y] = [mowers.array[currentMower].startX, mowers.array[currentMower].startY];\n    y = gridSize[1] - 1 - y;\n    grid[y + 1][x].mowed = true;\n    setMowerPosition(grid[y + 1][x].card.x, grid[y + 1][x].card.y);\n    forceUpdate();\n\n    if (finished === false) {\n      console.log(currentMower, currentAction);\n\n      if (mowers.array.length > currentMower) {\n        if (mowers.array[currentMower].path.length > currentAction) {\n          nextOperation(currentMower, currentAction);\n          setCurrentAction(currentAction + 1);\n        } else {\n          if (mowers.array.length - 1 > currentMower) {\n            setCurrentMower(currentMower + 1);\n            setCurrentAction(0);\n          } else setFinished(true);\n        }\n      }\n    }\n  }\n\n  function nextOperation(mower, id) {\n    const action = mowers.array[mower].path[id];\n    if (action === \"A\") forward(mower);else {\n      pivot(action, mower);\n    }\n  }\n\n  function pivot(direction, mower) {\n    switch (mowers.array[mower].startOrientation) {\n      case \"Nord\":\n        if (direction === \"D\") {\n          mowers.array[mower].startOrientation = \"Est\";\n        }\n\n        if (direction === \"G\") {\n          mowers.array[mower].startOrientation = \"Ouest\";\n        }\n\n        break;\n\n      case \"Sud\":\n        if (direction === \"D\") {\n          mowers.array[mower].startOrientation = \"Ouest\";\n        }\n\n        if (direction === \"G\") {\n          mowers.array[mower].startOrientation = \"Est\";\n        }\n\n        break;\n\n      case \"Est\":\n        if (direction === \"D\") {\n          mowers.array[mower].startOrientation = \"Sud\";\n        }\n\n        if (direction === \"G\") {\n          mowers.array[mower].startOrientation = \"Nord\";\n        }\n\n        break;\n\n      case \"Ouest\":\n        if (direction === \"D\") {\n          mowers.array[mower].startOrientation = \"Nord\";\n        }\n\n        if (direction === \"G\") {\n          mowers.array[mower].startOrientation = \"Sud\";\n        }\n\n        break;\n\n      default:\n        break;\n    }\n\n    setMowers(mowers);\n  }\n\n  function forward(mower) {\n    let orientation = mowers.array[mower].startOrientation;\n\n    if (orientation === \"Nord\") {\n      if (mowers.array[mower].startY < gridSize[1] - 1) {\n        mowers.array[mower].startY += 1;\n      } else console.log(\"Mouvement inutile\");\n    }\n\n    if (orientation === \"Sud\") {\n      if (mowers.array[mower].startY > 0) {\n        mowers.array[mower].startY -= 1;\n      } else console.log(\"Mouvement inutile\");\n    }\n\n    if (orientation === \"Est\") {\n      if (mowers.array[mower].startX < gridSize[0] - 1) {\n        mowers.array[mower].startX += 1;\n      } else console.log(\"Mouvement inutile\");\n    }\n\n    if (orientation === \"Ouest\") {\n      if (mowers.array[mower].startX > 0) {\n        mowers.array[mower].startX -= 1;\n      } else console.log(\"Mouvement inutile\");\n    }\n\n    setMowers(mowers);\n  }\n\n  function updateStartMowerPosition(pos, ori, key) {\n    let mow = mowers;\n    if (pos[0] >= 0 && pos[0] < gridSize[1]) mow.array[key].startX = parseInt(pos[0]);else alert(\"La tondeuse n'est plus sur la pelouse !\");\n    if (pos[1] >= 0 && pos[1] < gridSize[0]) mow.array[key].startY = parseInt(pos[1]);else alert(\"La tondeuse n'est plus sur la pelouse !\");\n    mow.array[key].startOrientation = ori;\n    setMowers(mow);\n    forceUpdate();\n  }\n\n  function updatePathMower(char, key, mode) {\n    let letter = char.slice(-1);\n    if (letter === \"d\" || letter === \"D\") mowers.array[key].path.push(\"D\");\n    if (letter === \"g\" || letter === \"G\") mowers.array[key].path.push(\"G\");\n    if (letter === \"a\" || letter === \"A\") mowers.array[key].path.push(\"A\");\n    setMowers(mowers);\n    if (mode === 1) forceUpdate();\n  }\n\n  function DisplayMowerForms() {\n    return mowers.array.map((mower, key) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"divMowers\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: \"numMower\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 15\n        }\n      }, \"Tondeuse \", key + 1)), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"form-group row sizeForm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        for: \"example-number-input\",\n        class: \"col-4 col-form-label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 17\n        }\n      }, \"Position X :\"), started ? /*#__PURE__*/React.createElement(\"label\", {\n        class: \"col-4 col-form-label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 19\n        }\n      }, mowers.array[key].startX) : /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        class: \"form-control\",\n        type: \"number\",\n        value: mowers.array[key].startX,\n        onChange: e => updateStartMowerPosition([e.target.value, mowers.array[key].startY], mowers.array[key].startOrientation, key, 0),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 21\n        }\n      })))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"form-group row sizeForm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        for: \"example-number-input\",\n        class: \"col-4 col-form-label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 17\n        }\n      }, \"Position Y :\"), started ? /*#__PURE__*/React.createElement(\"label\", {\n        class: \"col-4 col-form-label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 19\n        }\n      }, mowers.array[key].startY) : /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        class: \"form-control\",\n        type: \"number\",\n        value: mowers.array[key].startY,\n        onChange: e => updateStartMowerPosition([mowers.array[key].startX, e.target.value], mowers.array[key].startOrientation, key, 0),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 21\n        }\n      })))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"form-group row sizeForm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        for: \"example-number-input\",\n        class: \"col-4 col-form-label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 17\n        }\n      }, \"Orientation :\"), started ? /*#__PURE__*/React.createElement(\"label\", {\n        class: \"col-4 col-form-label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 19\n        }\n      }, mowers.array[key].startOrientation) : /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"select\", {\n        class: \"form-control\",\n        value: mowers.array[key].startOrientation,\n        onChange: e => updateStartMowerPosition([mowers.array[key].startX, mowers.array[key].startY], e.target.value, key, 0),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 23\n        }\n      }, \"Nord\"), /*#__PURE__*/React.createElement(\"option\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 23\n        }\n      }, \"Sud\"), /*#__PURE__*/React.createElement(\"option\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 23\n        }\n      }, \"Est\"), /*#__PURE__*/React.createElement(\"option\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 23\n        }\n      }, \"Ouest\")))))), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 11\n        }\n      }, started ? /*#__PURE__*/React.createElement(\"label\", {\n        class: \"col-form-label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 15\n        }\n      }, \"Instructions :\") : /*#__PURE__*/React.createElement(\"div\", {\n        class: \"input-group-append\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        class: \"btn btn-secondary\",\n        type: \"button\",\n        onClick: () => updatePathMower(\"D\", key, 1),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 17\n        }\n      }, \"D\"), /*#__PURE__*/React.createElement(\"button\", {\n        class: \"btn btn-secondary\",\n        type: \"button\",\n        onClick: () => updatePathMower(\"G\", key, 1),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 17\n        }\n      }, \"G\"), /*#__PURE__*/React.createElement(\"button\", {\n        class: \"btn btn-secondary\",\n        type: \"button\",\n        onClick: () => updatePathMower(\"A\", key, 1),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 17\n        }\n      }, \"A\")), started ? /*#__PURE__*/React.createElement(\"label\", {\n        class: \"col-4 col-form-label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 508,\n          columnNumber: 15\n        }\n      }, mowers.array[key].path) : /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        class: \"form-control\",\n        id: \"formGroupExampleInput\",\n        placeholder: \"Cha\\xEEne d'instructions\",\n        value: mowers.array[key].path,\n        onChange: e => updatePathMower(e.target.value, key),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 15\n        }\n      })));\n    });\n  }\n\n  function GetMowers() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"formMowers\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 9\n      }\n    }, \"Entrer les informations sur les tondeuses :\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      class: \"btn btn-primary\",\n      onClick: started ? () => alert(\"Tu ne peux pas ajouter de tondeuses en cours de route !\") : () => addMower(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 9\n      }\n    }, started ? \"Les tondeuses ne sont plus modifiables\" : \"Ajouter une tondeuse\"), /*#__PURE__*/React.createElement(DisplayMowerForms, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      class: \"btn btn-primary\",\n      onClick: () => startMow(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 13\n      }\n    }, currentMower === 0 && currentAction === 0 && !finished ? \"Démarrer la tonte\" : finished ? \"La tonte est terminée\" : \"Poursuivre la tonte\")), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 11\n      }\n    }, started ? finished ? null : /*#__PURE__*/React.createElement(\"p\", {\n      className: \"col-form-label textMowerCurrent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 17\n      }\n    }, \"La tondeuse \", currentMower, \" est en train de tondre\") : null)));\n  }\n\n  function EndMow() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"endMow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580,\n        columnNumber: 9\n      }\n    }, \"La tonte est termin\\xE9e\"), mowers.array.map((mower, key) => {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 13\n        }\n      }, \"La tondeuse \", key + 1, \" s'est arr\\xEAt\\xE9e en \", mower.startX, \",\", mower.startY, \", orient\\xE9e \", mower.startOrientation);\n    }));\n  }\n}","map":{"version":3,"sources":["/home/aymeric/Git/MowGrassIT/src/App.js"],"names":["React","useState","useEffect","CardMedia","makeStyles","Card","Grid","grass1","grass2","mower","App","gridSize","setGridSize","grid","setGrid","createGrid","mowerPos","setMowerPos","x","y","visible","mowers","setMowers","array","startX","startY","startOrientation","path","currentMower","setCurrentMower","currentAction","setCurrentAction","finished","setFinished","started","setStarted","useStyles","cardStyle","maxWidth","boxShadow","cardMedia","height","width","classes","updateState","forceUpdate","useCallback","size","i","row","j","push","card","mowed","updateSizeArea","alert","setMowerPosition","p","GetGridSizeArea","e","target","value","DisplayRow","key","map","cell","key2","el","getBoundingClientRect","window","pageXOffset","pageYOffset","DisplayGrid","orientationToDegree","ori","DisplayMower","orientation","console","log","position","left","top","opacity","transform","addMower","mow","startMow","length","nextOperation","id","action","forward","pivot","direction","updateStartMowerPosition","pos","parseInt","updatePathMower","char","mode","letter","slice","DisplayMowerForms","GetMowers","EndMow"],"mappings":"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","sourcesContent":["// Author : Aymeric LE FEYER\n// Date : 14/05/2020\n// Client: Progress-IT\n\nimport React from \"react\";\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport { CardMedia, makeStyles, Card, Grid } from \"@material-ui/core\";\n\nimport grass1 from \"./res/grass1.jpg\";\nimport grass2 from \"./res/grass2.jpg\";\nimport mower from \"./res/mower.png\";\n\nexport default function App() {\n  // Hooks\n  // Get the size of the grid\n  const [gridSize, setGridSize] = useState([5, 5]);\n  // Get the grid (absolute positions of tiles and know if the tile is mowed)\n  const [grid, setGrid] = useState(createGrid(gridSize));\n  // Position of the current mower\n  const [mowerPos, setMowerPos] = useState({\n    x: 0,\n    y: 0,\n    visible: false,\n  });\n  // Array of all mowers, with informations\n  const [mowers, setMowers] = useState({\n    array: [\n      {\n        startX: 0,\n        startY: 0,\n        startOrientation: \"Nord\",\n        path: [],\n      },\n    ],\n  });\n  // Index of the current mower in the final mowing\n  const [currentMower, setCurrentMower] = useState(0);\n  // Index of the current mower in the final mowing\n  const [currentAction, setCurrentAction] = useState(0);\n  // Know if the mowing is finished or not\n  const [finished, setFinished] = useState(false);\n  // Know if the mowing has started or not\n  const [started, setStarted] = useState(false);\n  // Update the started hook\n  useEffect(() => {\n    setStarted(!(currentAction === 0 && currentMower === 0) || finished);\n  }, [started, currentAction, currentMower, finished]);\n\n  // Style of the tiles\n  const useStyles = makeStyles({\n    cardStyle: {\n      maxWidth: 345,\n\n      boxShadow: \"1px 1px 2px black\",\n    },\n    cardMedia: {\n      height: 80,\n      width: 80,\n    },\n  });\n\n  const classes = useStyles();\n\n  // Force the rendering of components\n  const [, updateState] = React.useState();\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n\n  return (\n    <div className=\"App\">\n      <h1>MowGrass-IT</h1>\n      <button type=\"button\" class=\"btn btn-primary\">\n        Récupérer le sujet\n      </button>\n\n      <GetGridSizeArea />\n      <GetMowers />\n      <DisplayGrid />\n      <DisplayMower />\n      {finished ? <EndMow /> : null}\n    </div>\n  );\n\n  function createGrid(size) {\n    let grid = [[]];\n    for (let i = 0; i < size[0]; i++) {\n      let row = [];\n      for (let j = 0; j < size[1]; j++) {\n        row.push({\n          card: {\n            x: 0,\n            y: 0,\n          },\n          mowed: false,\n        });\n      }\n      grid.push(row);\n    }\n    return grid;\n  }\n\n  function updateSizeArea(size) {\n    if (size[0] > 4 && size[1] > 4) {\n      if (size[0] <= 15 && size[1] <= 15) {\n        setGridSize(size);\n        setGrid(createGrid(size));\n      } else alert(\"La taille doit être inférieure à 16\");\n    } else alert(\"La taille doit être supérieure à 4\");\n  }\n\n  function setMowerPosition(x, y) {\n    let p = mowerPos;\n    p.x = x;\n    p.y = y;\n    setMowerPos(p);\n  }\n\n  function GetGridSizeArea() {\n    return (\n      <div>\n        <p className=\"textSizeGrid\">Taille de la grille : </p>\n        <div class=\"form-group row sizeForm\">\n          <label for=\"example-number-input\" class=\"col-2 col-form-label\">\n            Hauteur :\n          </label>\n          {started ? (\n            <label class=\"col-form-label\">{gridSize[0]}</label>\n          ) : (\n            <div>\n              <input\n                class=\"form-control\"\n                type=\"number\"\n                value={gridSize[0]}\n                onChange={(e) => updateSizeArea([e.target.value, gridSize[1]])}\n              />\n            </div>\n          )}\n        </div>\n        <div class=\"form-group row sizeForm\">\n          <label for=\"example-number-input\" class=\"col-2 col-form-label\">\n            Largeur :\n          </label>\n          {started ? (\n            <label class=\"col-form-label\">{gridSize[1]}</label>\n          ) : (\n            <div>\n              <input\n                class=\"form-control\"\n                type=\"number\"\n                value={gridSize[1]}\n                onChange={(e) => updateSizeArea([gridSize[0], e.target.value])}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  function DisplayRow(row, key) {\n    return (\n      <Grid container>\n        {row.map((cell, key2) => {\n          return (\n            <Grid item>\n              <Card\n                className={classes.cardStyle}\n                ref={(el) => {\n                  if (!el) return;\n\n                  grid[key][key2].card.x =\n                    el.getBoundingClientRect().x + window.pageXOffset;\n                  grid[key][key2].card.y =\n                    el.getBoundingClientRect().y + window.pageYOffset;\n                }}\n              >\n                <CardMedia\n                  className={classes.cardMedia}\n                  image={grid[key][key2].mowed ? grass2 : grass1}\n                />\n              </Card>\n            </Grid>\n          );\n        })}\n      </Grid>\n    );\n  }\n\n  function DisplayGrid() {\n    return (\n      <div className=\"lawn\">\n        {grid.map((row, key) => {\n          return DisplayRow(row, key);\n        })}\n      </div>\n    );\n  }\n\n  function orientationToDegree(ori) {\n    switch (ori) {\n      case \"Nord\":\n        return 0;\n      case \"Est\":\n        return 90;\n      case \"Sud\":\n        return 180;\n      case \"Ouest\":\n        return 270;\n      default:\n        return 0;\n    }\n  }\n\n  function DisplayMower() {\n    const orientation = orientationToDegree(\n      mowers.array[currentMower].startOrientation\n    );\n    console.log(orientation);\n\n    return (\n      <div>\n        <img\n          src={mower}\n          alt=\"mower\"\n          style={{\n            position: \"absolute\",\n            width: 80,\n            height: 80,\n            left: `${mowerPos.x}px`,\n            top: `${mowerPos.y}px`,\n            opacity: mowerPos.visible === true ? 1 : 0,\n            transform: `rotate(${orientation}deg)`,\n          }}\n        />\n      </div>\n    );\n  }\n\n  function addMower() {\n    let mow = mowers;\n    mow.array.push({\n      startX: 0,\n      startY: 0,\n      startOrientation: \"Nord\",\n      path: [],\n    });\n    setMowers(mow);\n    forceUpdate();\n  }\n\n  function startMow() {\n    console.log(\n      \"operation : \" + mowers.array[currentMower].path[currentAction]\n    );\n    mowerPos.visible = true;\n    let [x, y] = [\n      mowers.array[currentMower].startX,\n      mowers.array[currentMower].startY,\n    ];\n\n    y = gridSize[1] - 1 - y;\n\n    grid[y + 1][x].mowed = true;\n\n    setMowerPosition(grid[y + 1][x].card.x, grid[y + 1][x].card.y);\n\n    forceUpdate();\n    if (finished === false) {\n      console.log(currentMower, currentAction);\n      if (mowers.array.length > currentMower) {\n        if (mowers.array[currentMower].path.length > currentAction) {\n          nextOperation(currentMower, currentAction);\n          setCurrentAction(currentAction + 1);\n        } else {\n          if (mowers.array.length - 1 > currentMower) {\n            setCurrentMower(currentMower + 1);\n            setCurrentAction(0);\n          } else setFinished(true);\n        }\n      }\n    }\n  }\n\n  function nextOperation(mower, id) {\n    const action = mowers.array[mower].path[id];\n    if (action === \"A\") forward(mower);\n    else {\n      pivot(action, mower);\n    }\n  }\n\n  function pivot(direction, mower) {\n    switch (mowers.array[mower].startOrientation) {\n      case \"Nord\":\n        if (direction === \"D\") {\n          mowers.array[mower].startOrientation = \"Est\";\n        }\n        if (direction === \"G\") {\n          mowers.array[mower].startOrientation = \"Ouest\";\n        }\n        break;\n      case \"Sud\":\n        if (direction === \"D\") {\n          mowers.array[mower].startOrientation = \"Ouest\";\n        }\n        if (direction === \"G\") {\n          mowers.array[mower].startOrientation = \"Est\";\n        }\n        break;\n      case \"Est\":\n        if (direction === \"D\") {\n          mowers.array[mower].startOrientation = \"Sud\";\n        }\n        if (direction === \"G\") {\n          mowers.array[mower].startOrientation = \"Nord\";\n        }\n        break;\n      case \"Ouest\":\n        if (direction === \"D\") {\n          mowers.array[mower].startOrientation = \"Nord\";\n        }\n        if (direction === \"G\") {\n          mowers.array[mower].startOrientation = \"Sud\";\n        }\n        break;\n      default:\n        break;\n    }\n    setMowers(mowers);\n  }\n\n  function forward(mower) {\n    let orientation = mowers.array[mower].startOrientation;\n    if (orientation === \"Nord\") {\n      if (mowers.array[mower].startY < gridSize[1] - 1) {\n        mowers.array[mower].startY += 1;\n      } else console.log(\"Mouvement inutile\");\n    }\n    if (orientation === \"Sud\") {\n      if (mowers.array[mower].startY > 0) {\n        mowers.array[mower].startY -= 1;\n      } else console.log(\"Mouvement inutile\");\n    }\n    if (orientation === \"Est\") {\n      if (mowers.array[mower].startX < gridSize[0] - 1) {\n        mowers.array[mower].startX += 1;\n      } else console.log(\"Mouvement inutile\");\n    }\n    if (orientation === \"Ouest\") {\n      if (mowers.array[mower].startX > 0) {\n        mowers.array[mower].startX -= 1;\n      } else console.log(\"Mouvement inutile\");\n    }\n    setMowers(mowers);\n  }\n\n  function updateStartMowerPosition(pos, ori, key) {\n    let mow = mowers;\n    if (pos[0] >= 0 && pos[0] < gridSize[1])\n      mow.array[key].startX = parseInt(pos[0]);\n    else alert(\"La tondeuse n'est plus sur la pelouse !\");\n    if (pos[1] >= 0 && pos[1] < gridSize[0])\n      mow.array[key].startY = parseInt(pos[1]);\n    else alert(\"La tondeuse n'est plus sur la pelouse !\");\n    mow.array[key].startOrientation = ori;\n    setMowers(mow);\n    forceUpdate();\n  }\n\n  function updatePathMower(char, key, mode) {\n    let letter = char.slice(-1);\n    if (letter === \"d\" || letter === \"D\") mowers.array[key].path.push(\"D\");\n    if (letter === \"g\" || letter === \"G\") mowers.array[key].path.push(\"G\");\n    if (letter === \"a\" || letter === \"A\") mowers.array[key].path.push(\"A\");\n    setMowers(mowers);\n    if (mode === 1) forceUpdate();\n  }\n\n  function DisplayMowerForms() {\n    return mowers.array.map((mower, key) => {\n      return (\n        <div className=\"divMowers\">\n          <Grid container>\n            <Grid item xs={2}>\n              <p className=\"numMower\">Tondeuse {key + 1}</p>\n            </Grid>\n            <Grid item xs>\n              <div class=\"form-group row sizeForm\">\n                <label for=\"example-number-input\" class=\"col-4 col-form-label\">\n                  Position X :\n                </label>\n\n                {started ? (\n                  <label class=\"col-4 col-form-label\">\n                    {mowers.array[key].startX}\n                  </label>\n                ) : (\n                  <div>\n                    <input\n                      class=\"form-control\"\n                      type=\"number\"\n                      value={mowers.array[key].startX}\n                      onChange={(e) =>\n                        updateStartMowerPosition(\n                          [e.target.value, mowers.array[key].startY],\n                          mowers.array[key].startOrientation,\n                          key,\n                          0\n                        )\n                      }\n                    />\n                  </div>\n                )}\n              </div>\n            </Grid>\n            <Grid item xs>\n              <div class=\"form-group row sizeForm\">\n                <label for=\"example-number-input\" class=\"col-4 col-form-label\">\n                  Position Y :\n                </label>\n\n                {started ? (\n                  <label class=\"col-4 col-form-label\">\n                    {mowers.array[key].startY}\n                  </label>\n                ) : (\n                  <div>\n                    <input\n                      class=\"form-control\"\n                      type=\"number\"\n                      value={mowers.array[key].startY}\n                      onChange={(e) =>\n                        updateStartMowerPosition(\n                          [mowers.array[key].startX, e.target.value],\n                          mowers.array[key].startOrientation,\n                          key,\n                          0\n                        )\n                      }\n                    />\n                  </div>\n                )}\n              </div>\n            </Grid>\n            <Grid item xs>\n              <div class=\"form-group row sizeForm\">\n                <label for=\"example-number-input\" class=\"col-4 col-form-label\">\n                  Orientation :\n                </label>\n\n                {started ? (\n                  <label class=\"col-4 col-form-label\">\n                    {mowers.array[key].startOrientation}\n                  </label>\n                ) : (\n                  <div>\n                    <select\n                      class=\"form-control\"\n                      value={mowers.array[key].startOrientation}\n                      onChange={(e) =>\n                        updateStartMowerPosition(\n                          [mowers.array[key].startX, mowers.array[key].startY],\n                          e.target.value,\n                          key,\n                          0\n                        )\n                      }\n                    >\n                      <option>Nord</option>\n                      <option>Sud</option>\n                      <option>Est</option>\n                      <option>Ouest</option>\n                    </select>\n                  </div>\n                )}\n              </div>\n            </Grid>\n          </Grid>\n          <div class=\"input-group mb-3\">\n            {started ? (\n              <label class=\"col-form-label\">Instructions :</label>\n            ) : (\n              <div class=\"input-group-append\">\n                <button\n                  class=\"btn btn-secondary\"\n                  type=\"button\"\n                  onClick={() => updatePathMower(\"D\", key, 1)}\n                >\n                  D\n                </button>\n                <button\n                  class=\"btn btn-secondary\"\n                  type=\"button\"\n                  onClick={() => updatePathMower(\"G\", key, 1)}\n                >\n                  G\n                </button>\n                <button\n                  class=\"btn btn-secondary\"\n                  type=\"button\"\n                  onClick={() => updatePathMower(\"A\", key, 1)}\n                >\n                  A\n                </button>\n              </div>\n            )}\n            {started ? (\n              <label class=\"col-4 col-form-label\">\n                {mowers.array[key].path}\n              </label>\n            ) : (\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                id=\"formGroupExampleInput\"\n                placeholder=\"Chaîne d'instructions\"\n                value={mowers.array[key].path}\n                onChange={(e) => updatePathMower(e.target.value, key)}\n              />\n            )}\n          </div>\n        </div>\n      );\n    });\n  }\n\n  function GetMowers() {\n    return (\n      <div className=\"formMowers\">\n        <p className=\"title\">Entrer les informations sur les tondeuses :</p>\n        <button\n          type=\"button\"\n          class=\"btn btn-primary\"\n          onClick={\n            started\n              ? () =>\n                  alert(\n                    \"Tu ne peux pas ajouter de tondeuses en cours de route !\"\n                  )\n              : () => addMower()\n          }\n        >\n          {started\n            ? \"Les tondeuses ne sont plus modifiables\"\n            : \"Ajouter une tondeuse\"}\n        </button>\n\n        <DisplayMowerForms />\n        <Grid container>\n          <Grid item>\n            <button\n              type=\"button\"\n              class=\"btn btn-primary\"\n              onClick={() => startMow()}\n            >\n              {currentMower === 0 && currentAction === 0 && !finished\n                ? \"Démarrer la tonte\"\n                : finished\n                ? \"La tonte est terminée\"\n                : \"Poursuivre la tonte\"}\n            </button>\n          </Grid>\n          <Grid item>\n            {started ? (\n              finished ? null : (\n                <p className=\"col-form-label textMowerCurrent\">\n                  La tondeuse {currentMower} est en train de tondre\n                </p>\n              )\n            ) : null}\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n\n  function EndMow() {\n    return (\n      <div className=\"endMow\">\n        <p className=\"title\">La tonte est terminée</p>\n        {mowers.array.map((mower, key) => {\n          return (\n            <p>\n              La tondeuse {key + 1} s'est arrêtée en {mower.startX},\n              {mower.startY}, orientée {mower.startOrientation}\n            </p>\n          );\n        })}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}